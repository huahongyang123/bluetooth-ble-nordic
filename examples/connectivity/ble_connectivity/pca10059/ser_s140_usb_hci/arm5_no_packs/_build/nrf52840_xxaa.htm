<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52840_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52840_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Sep 21 13:17:16 2024
<BR><P>
<H3>Maximum Stack Usage =       1236 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
conn_mw_ble_gatts_characteristic_add &rArr; ble_gatts_characteristic_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[161]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[161]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[162]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[162]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[1cd]">app_usbd_event_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1cd]">app_usbd_event_execute</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from nrfx_power.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from ble_dtm.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from drv_rtc.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from ble_dtm.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from ble_dtm.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from ser_phy_hci.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">USBD_IRQHandler</a> from nrfx_usbd.o(i.USBD_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[39]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[d0]">app_error_fault_handler</a> from ser_conn_error_handling.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[102]">app_usbd_core_event_handler</a> from app_usbd_core.o(i.app_usbd_core_event_handler) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[3b]">app_usbd_event_handler</a> from app_usbd.o(i.app_usbd_event_handler) referenced from app_usbd.o(i.app_usbd_init)
 <LI><a href="#[0]">app_usbd_hfclk_ready</a> from app_usbd.o(i.app_usbd_hfclk_ready) referenced 2 times from app_usbd.o(.data)
 <LI><a href="#[fa]">app_usbd_power_event_handler</a> from app_usbd.o(i.app_usbd_power_event_handler) referenced from app_usbd.o(.constdata)
 <LI><a href="#[41]">ble_common_cfg_vs_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_common_cfg_vs_uuid_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[bf]">ble_common_opt_conn_evt_ext_t_dec</a> from ble_struct_serialization.o(i.ble_common_opt_conn_evt_ext_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[b8]">ble_common_opt_conn_evt_ext_t_enc</a> from ble_struct_serialization.o(i.ble_common_opt_conn_evt_ext_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[be]">ble_common_opt_pa_lna_t_dec</a> from ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[b7]">ble_common_opt_pa_lna_t_enc</a> from ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[49]">ble_data_t_dec</a> from ble_struct_serialization.o(i.ble_data_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_dec)
 <LI><a href="#[49]">ble_data_t_dec</a> from ble_struct_serialization.o(i.ble_data_t_dec) referenced from ble_gap_conn.o(i.ble_gap_scan_start_req_dec)
 <LI><a href="#[4a]">ble_data_t_enc</a> from ble_struct_serialization.o(i.ble_data_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_enc)
 <LI><a href="#[4a]">ble_data_t_enc</a> from ble_struct_serialization.o(i.ble_data_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
 <LI><a href="#[4a]">ble_data_t_enc</a> from ble_struct_serialization.o(i.ble_data_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_timeout_enc)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_conn.o(i.ble_gap_addr_set_req_dec)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_conn.o(i.ble_gap_connect_req_dec)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_dec)
 <LI><a href="#[48]">ble_gap_addr_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec) referenced from ble_gap_conn.o(i.ble_gap_whitelist_set_req_dec)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_scan_req_report_enc)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc)
 <LI><a href="#[62]">ble_gap_addr_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_enc)
 <LI><a href="#[4d]">ble_gap_adv_data_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_dec) referenced from ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
 <LI><a href="#[65]">ble_gap_adv_data_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_set_terminated_t_enc)
 <LI><a href="#[65]">ble_gap_adv_data_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
 <LI><a href="#[4e]">ble_gap_adv_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
 <LI><a href="#[4b]">ble_gap_adv_properties_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_properties_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec)
 <LI><a href="#[61]">ble_gap_adv_report_type_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_adv_report_type_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
 <LI><a href="#[63]">ble_gap_aux_pointer_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_aux_pointer_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
 <LI><a href="#[43]">ble_gap_cfg_device_name_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_cfg_device_name_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[42]">ble_gap_cfg_role_count_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_cfg_role_count_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[3c]">ble_gap_conn_cfg_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_cfg_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[53]">ble_gap_conn_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_conn_param_update_req_dec)
 <LI><a href="#[53]">ble_gap_conn_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_connect_req_dec)
 <LI><a href="#[53]">ble_gap_conn_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_ppcp_set_req_dec)
 <LI><a href="#[6c]">ble_gap_conn_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_request_t_enc)
 <LI><a href="#[6c]">ble_gap_conn_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_t_enc)
 <LI><a href="#[6c]">ble_gap_conn_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
 <LI><a href="#[6c]">ble_gap_conn_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_enc) referenced from ble_gap_conn.o(i.ble_gap_ppcp_get_rsp_enc)
 <LI><a href="#[52]">ble_gap_conn_sec_mode_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_cfg_device_name_t_dec)
 <LI><a href="#[52]">ble_gap_conn_sec_mode_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_dec) referenced from ble_gap_conn.o(i.ble_gap_device_name_set_req_dec)
 <LI><a href="#[52]">ble_gap_conn_sec_mode_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_dec)
 <LI><a href="#[55]">ble_gap_conn_sec_mode_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_t_enc)
 <LI><a href="#[55]">ble_gap_conn_sec_mode_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_enc) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_enc)
 <LI><a href="#[54]">ble_gap_conn_sec_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_t_enc) referenced from ble_gap_conn.o(i.ble_gap_conn_sec_get_rsp_enc)
 <LI><a href="#[54]">ble_gap_conn_sec_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_conn_sec_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_sec_update_t_enc)
 <LI><a href="#[58]">ble_gap_data_length_limitation_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_data_length_limitation_t_enc) referenced from ble_gap_conn.o(i.ble_gap_data_length_update_rsp_enc)
 <LI><a href="#[57]">ble_gap_data_length_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_data_length_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_data_length_update_req_dec)
 <LI><a href="#[6f]">ble_gap_data_length_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_data_length_params_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_enc)
 <LI><a href="#[6f]">ble_gap_data_length_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_data_length_params_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_request_enc)
 <LI><a href="#[5c]">ble_gap_enc_info_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec)
 <LI><a href="#[5c]">ble_gap_enc_info_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_dec) referenced from ble_gap_conn.o(i.ble_gap_encrypt_req_dec)
 <LI><a href="#[5c]">ble_gap_enc_info_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_dec) referenced from ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
 <LI><a href="#[5e]">ble_gap_enc_info_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc)
 <LI><a href="#[80]">ble_gap_enc_key_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
 <LI><a href="#[81]">ble_gap_enc_key_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
 <LI><a href="#[60]">ble_gap_evt_adv_report_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_adv_report_enc)
 <LI><a href="#[64]">ble_gap_evt_adv_set_terminated_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_adv_set_terminated_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_adv_set_terminated_enc)
 <LI><a href="#[66]">ble_gap_evt_auth_status_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_auth_status_enc)
 <LI><a href="#[6b]">ble_gap_evt_conn_param_update_request_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_request_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_request_enc)
 <LI><a href="#[6a]">ble_gap_evt_conn_param_update_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_enc)
 <LI><a href="#[6d]">ble_gap_evt_conn_sec_update_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_conn_sec_update_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_conn_sec_update_enc)
 <LI><a href="#[6e]">ble_gap_evt_connected_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_connected_enc)
 <LI><a href="#[70]">ble_gap_evt_disconnected_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_disconnected_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_disconnected_enc)
 <LI><a href="#[73]">ble_gap_evt_sec_info_request_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_sec_info_request_enc)
 <LI><a href="#[74]">ble_gap_evt_sec_params_request_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_params_request_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_sec_params_request_enc)
 <LI><a href="#[76]">ble_gap_evt_sec_request_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_request_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_sec_request_enc)
 <LI><a href="#[59]">ble_gap_id_key_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec) referenced from ble_gap_conn.o(i.ble_gap_device_identities_set_req_dec)
 <LI><a href="#[59]">ble_gap_id_key_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
 <LI><a href="#[82]">ble_gap_id_key_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
 <LI><a href="#[5a]">ble_gap_irk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_dec) referenced from ble_gap_conn.o(i.ble_gap_device_identities_set_req_dec)
 <LI><a href="#[5a]">ble_gap_irk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec)
 <LI><a href="#[5a]">ble_gap_irk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_dec)
 <LI><a href="#[5a]">ble_gap_irk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_dec) referenced from ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
 <LI><a href="#[77]">ble_gap_irk_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc)
 <LI><a href="#[77]">ble_gap_irk_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_irk_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_enc)
 <LI><a href="#[78]">ble_gap_lesc_dhkey_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_dhkey_t_dec) referenced from ble_gap_conn.o(i.ble_gap_lesc_dhkey_reply_req_dec)
 <LI><a href="#[7b]">ble_gap_lesc_oob_data_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_dec) referenced from ble_gap_conn.o(i.ble_gap_lesc_oob_data_set_req_dec)
 <LI><a href="#[7a]">ble_gap_lesc_oob_data_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_enc) referenced from ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_rsp_enc)
 <LI><a href="#[79]">ble_gap_lesc_p256_pk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_dec) referenced from ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_req_dec)
 <LI><a href="#[79]">ble_gap_lesc_p256_pk_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
 <LI><a href="#[71]">ble_gap_lesc_p256_pk_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_lesc_dhkey_request_enc)
 <LI><a href="#[71]">ble_gap_lesc_p256_pk_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
 <LI><a href="#[5d]">ble_gap_master_id_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_master_id_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec)
 <LI><a href="#[5d]">ble_gap_master_id_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_master_id_t_dec) referenced from ble_gap_conn.o(i.ble_gap_encrypt_req_dec)
 <LI><a href="#[5f]">ble_gap_master_id_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_master_id_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc)
 <LI><a href="#[5f]">ble_gap_master_id_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_master_id_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc)
 <LI><a href="#[c3]">ble_gap_opt_auth_payload_timeout_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_auth_payload_timeout_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[bc]">ble_gap_opt_auth_payload_timeout_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_auth_payload_timeout_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[c0]">ble_gap_opt_ch_map_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_ch_map_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[b9]">ble_gap_opt_ch_map_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_ch_map_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[c4]">ble_gap_opt_compat_mode_1_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_compat_mode_1_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[bd]">ble_gap_opt_compat_mode_1_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_compat_mode_1_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[c1]">ble_gap_opt_local_conn_latency_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[ba]">ble_gap_opt_local_conn_latency_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[c2]">ble_gap_opt_passkey_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_passkey_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[bb]">ble_gap_opt_passkey_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_passkey_t_enc) referenced from ble_conn.o(i.ble_opt_get_rsp_enc)
 <LI><a href="#[c5]">ble_gap_opt_slave_latency_disable_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_opt_slave_latency_disable_t_dec) referenced from ble_conn.o(i.ble_opt_set_req_dec)
 <LI><a href="#[7c]">ble_gap_phys_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_phys_t_dec) referenced from ble_gap_conn.o(i.ble_gap_phy_update_req_dec)
 <LI><a href="#[72]">ble_gap_phys_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_phys_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_phy_update_request_enc)
 <LI><a href="#[7d]">ble_gap_privacy_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_privacy_get_req_dec)
 <LI><a href="#[7d]">ble_gap_privacy_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_privacy_set_req_dec)
 <LI><a href="#[7e]">ble_gap_privacy_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_enc) referenced from ble_gap_conn.o(i.ble_gap_privacy_get_rsp_enc)
 <LI><a href="#[56]">ble_gap_scan_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_scan_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_connect_req_dec)
 <LI><a href="#[56]">ble_gap_scan_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_scan_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_scan_start_req_dec)
 <LI><a href="#[87]">ble_gap_sec_kdist_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_kdist_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_dec)
 <LI><a href="#[69]">ble_gap_sec_kdist_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_kdist_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc)
 <LI><a href="#[69]">ble_gap_sec_kdist_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_kdist_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_enc)
 <LI><a href="#[84]">ble_gap_sec_keys_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_dec)
 <LI><a href="#[85]">ble_gap_sec_keys_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_enc)
 <LI><a href="#[86]">ble_gap_sec_keyset_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_dec) referenced from ble_gap_conn.o(i.ble_gap_sec_params_reply_req_dec)
 <LI><a href="#[67]">ble_gap_sec_keyset_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_enc) referenced from ble_gap_evt_conn.o(i.ble_gap_evt_auth_status_enc)
 <LI><a href="#[67]">ble_gap_sec_keyset_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_enc) referenced from ble_gap_conn.o(i.ble_gap_sec_params_reply_rsp_enc)
 <LI><a href="#[68]">ble_gap_sec_levels_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_levels_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc)
 <LI><a href="#[51]">ble_gap_sec_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_authenticate_req_dec)
 <LI><a href="#[51]">ble_gap_sec_params_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_dec) referenced from ble_gap_conn.o(i.ble_gap_sec_params_reply_req_dec)
 <LI><a href="#[75]">ble_gap_sec_params_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_evt_sec_params_request_t_enc)
 <LI><a href="#[7f]">ble_gap_sign_info_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sign_info_t_dec) referenced from ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
 <LI><a href="#[7f]">ble_gap_sign_info_t_dec</a> from ble_gap_struct_serialization.o(i.ble_gap_sign_info_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
 <LI><a href="#[83]">ble_gap_sign_info_t_enc</a> from ble_gap_struct_serialization.o(i.ble_gap_sign_info_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
 <LI><a href="#[a4]">ble_gatt_char_ext_props_t_dec</a> from ble_gatt_struct_serialization.o(i.ble_gatt_char_ext_props_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
 <LI><a href="#[a3]">ble_gatt_char_props_t_dec</a> from ble_gatt_struct_serialization.o(i.ble_gatt_char_props_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
 <LI><a href="#[8b]">ble_gatt_char_props_t_enc</a> from ble_gatt_struct_serialization.o(i.ble_gatt_char_props_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc)
 <LI><a href="#[3f]">ble_gatt_conn_cfg_t_dec</a> from ble_gatt_struct_serialization.o(i.ble_gatt_conn_cfg_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[8e]">ble_gattc_attr_info128_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_attr_info128_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc)
 <LI><a href="#[8f]">ble_gattc_attr_info16_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_attr_info16_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc)
 <LI><a href="#[91]">ble_gattc_char_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_disc_rsp_t_enc)
 <LI><a href="#[3d]">ble_gattc_conn_cfg_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_conn_cfg_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[95]">ble_gattc_desc_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_desc_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_desc_disc_rsp_t_enc)
 <LI><a href="#[8d]">ble_gattc_evt_attr_info_disc_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_attr_info_disc_rsp_enc)
 <LI><a href="#[90]">ble_gattc_evt_char_disc_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_disc_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_char_disc_rsp_enc)
 <LI><a href="#[92]">ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_char_val_by_uuid_read_rsp_enc)
 <LI><a href="#[93]">ble_gattc_evt_char_vals_read_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_vals_read_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_char_vals_read_rsp_enc)
 <LI><a href="#[94]">ble_gattc_evt_desc_disc_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_desc_disc_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_desc_disc_rsp_enc)
 <LI><a href="#[96]">ble_gattc_evt_exchange_mtu_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_exchange_mtu_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_exchange_mtu_rsp_enc)
 <LI><a href="#[97]">ble_gattc_evt_hvx_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_hvx_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_hvx_enc)
 <LI><a href="#[98]">ble_gattc_evt_prim_srvc_disc_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_prim_srvc_disc_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_prim_srvc_disc_rsp_enc)
 <LI><a href="#[9a]">ble_gattc_evt_read_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_read_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_read_rsp_enc)
 <LI><a href="#[9b]">ble_gattc_evt_rel_disc_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_rel_disc_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_rel_disc_rsp_enc)
 <LI><a href="#[9d]">ble_gattc_evt_timeout_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_timeout_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_timeout_enc)
 <LI><a href="#[9e]">ble_gattc_evt_write_rsp_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_evt_write_rsp_t_enc) referenced from ble_gattc_evt_conn.o(i.ble_gattc_evt_write_rsp_enc)
 <LI><a href="#[8a]">ble_gattc_handle_range_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_attr_info_discover_req_dec)
 <LI><a href="#[8a]">ble_gattc_handle_range_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_req_dec)
 <LI><a href="#[8a]">ble_gattc_handle_range_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_characteristics_discover_req_dec)
 <LI><a href="#[8a]">ble_gattc_handle_range_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_descriptors_discover_req_dec)
 <LI><a href="#[8a]">ble_gattc_handle_range_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_relationships_discover_req_dec)
 <LI><a href="#[9f]">ble_gattc_handle_range_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc)
 <LI><a href="#[9c]">ble_gattc_include_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_include_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_rel_disc_rsp_t_enc)
 <LI><a href="#[99]">ble_gattc_service_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_evt_prim_srvc_disc_rsp_t_enc)
 <LI><a href="#[99]">ble_gattc_service_t_enc</a> from ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_include_t_enc)
 <LI><a href="#[a0]">ble_gattc_write_params_t_dec</a> from ble_gattc_struct_serialization.o(i.ble_gattc_write_params_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_write_req_dec)
 <LI><a href="#[a2]">ble_gatts_attr_md_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec)
 <LI><a href="#[a2]">ble_gatts_attr_md_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
 <LI><a href="#[a1]">ble_gatts_attr_md_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_attr_get_rsp_enc)
 <LI><a href="#[a7]">ble_gatts_attr_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_characteristic_add_req_dec)
 <LI><a href="#[a7]">ble_gatts_attr_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_descriptor_add_req_dec)
 <LI><a href="#[b1]">ble_gatts_authorize_params_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_authorize_params_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_rw_authorize_reply_params_t_dec)
 <LI><a href="#[45]">ble_gatts_cfg_attr_tab_size_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_cfg_attr_tab_size_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[44]">ble_gatts_cfg_service_changed_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_cfg_service_changed_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[a8]">ble_gatts_char_handles_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_char_handles_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_characteristic_add_rsp_enc)
 <LI><a href="#[a6]">ble_gatts_char_md_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_characteristic_add_req_dec)
 <LI><a href="#[a5]">ble_gatts_char_pf_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_char_pf_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
 <LI><a href="#[3e]">ble_gatts_conn_cfg_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_conn_cfg_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[a9]">ble_gatts_evt_exchange_mtu_request_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_exchange_mtu_request_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_exchange_mtu_request_enc)
 <LI><a href="#[aa]">ble_gatts_evt_hvc_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_hvc_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_hvc_enc)
 <LI><a href="#[ac]">ble_gatts_evt_read_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_read_t_enc) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc)
 <LI><a href="#[ab]">ble_gatts_evt_rw_authorize_request_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_rw_authorize_request_enc)
 <LI><a href="#[ae]">ble_gatts_evt_sys_attr_missing_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_sys_attr_missing_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_sys_attr_missing_enc)
 <LI><a href="#[af]">ble_gatts_evt_timeout_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_timeout_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_timeout_enc)
 <LI><a href="#[ad]">ble_gatts_evt_write_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_write_t_enc) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc)
 <LI><a href="#[ad]">ble_gatts_evt_write_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_evt_write_t_enc) referenced from ble_gatts_evt_conn.o(i.ble_gatts_evt_write_enc)
 <LI><a href="#[b0]">ble_gatts_hvx_params_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_hvx_params_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_hvx_req_dec)
 <LI><a href="#[b2]">ble_gatts_rw_authorize_reply_params_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_rw_authorize_reply_params_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_rw_authorize_reply_req_dec)
 <LI><a href="#[b4]">ble_gatts_value_t_dec</a> from ble_gatts_struct_serialization.o(i.ble_gatts_value_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_value_set_req_dec)
 <LI><a href="#[b3]">ble_gatts_value_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_value_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_value_get_rsp_enc)
 <LI><a href="#[b3]">ble_gatts_value_t_enc</a> from ble_gatts_struct_serialization.o(i.ble_gatts_value_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_value_set_rsp_enc)
 <LI><a href="#[b5]">ble_l2cap_ch_setup_params_t_dec</a> from ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_setup_params_t_dec) referenced from ble_l2cap_conn.o(i.ble_l2cap_ch_setup_req_dec)
 <LI><a href="#[b6]">ble_l2cap_ch_tx_params_t_enc</a> from ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_tx_params_t_enc) referenced from ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_enc)
 <LI><a href="#[b6]">ble_l2cap_ch_tx_params_t_enc</a> from ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_tx_params_t_enc) referenced from ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_request_enc)
 <LI><a href="#[40]">ble_l2cap_conn_cfg_t_dec</a> from ble_l2cap_struct_serialization.o(i.ble_l2cap_conn_cfg_t_dec) referenced from ble_conn.o(i.ble_cfg_set_req_dec)
 <LI><a href="#[46]">ble_pa_lna_cfg_t_dec</a> from ble_struct_serialization.o(i.ble_pa_lna_cfg_t_dec) referenced from ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_dec)
 <LI><a href="#[47]">ble_pa_lna_cfg_t_enc</a> from ble_struct_serialization.o(i.ble_pa_lna_cfg_t_enc) referenced from ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_enc)
 <LI><a href="#[c6]">ble_user_mem_block_t_dec</a> from ble_struct_serialization.o(i.ble_user_mem_block_t_dec) referenced from ble_conn.o(i.ble_user_mem_reply_req_dec)
 <LI><a href="#[c7]">ble_uuid128_t_dec</a> from ble_struct_serialization.o(i.ble_uuid128_t_dec) referenced from ble_conn.o(i.ble_uuid_vs_add_req_dec)
 <LI><a href="#[88]">ble_uuid128_t_enc</a> from ble_struct_serialization.o(i.ble_uuid128_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_attr_info128_t_enc)
 <LI><a href="#[8c]">ble_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_uuid_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_req_dec)
 <LI><a href="#[8c]">ble_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_uuid_t_dec) referenced from ble_gattc_conn.o(i.ble_gattc_primary_services_discover_req_dec)
 <LI><a href="#[8c]">ble_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_uuid_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec)
 <LI><a href="#[8c]">ble_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_uuid_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_service_add_req_dec)
 <LI><a href="#[8c]">ble_uuid_t_dec</a> from ble_struct_serialization.o(i.ble_uuid_t_dec) referenced from ble_conn.o(i.ble_uuid_encode_req_dec)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_attr_info16_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_desc_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_attr_get_rsp_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_evt_read_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_evt_write_t_enc)
 <LI><a href="#[89]">ble_uuid_t_enc</a> from ble_struct_serialization.o(i.ble_uuid_t_enc) referenced from ble_conn.o(i.ble_uuid_decode_rsp_enc)
 <LI><a href="#[c8]">ble_version_t_enc</a> from ble_struct_serialization.o(i.ble_version_t_enc) referenced from ble_conn.o(i.ble_version_get_rsp_enc)
 <LI><a href="#[fe]">cdc_acm_consumer</a> from app_usbd_cdc_acm.o(i.cdc_acm_consumer) referenced 2 times from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[fb]">cdc_acm_event_handler</a> from app_usbd_cdc_acm.o(i.cdc_acm_event_handler) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[fc]">cdc_acm_feed_descriptors</a> from app_usbd_cdc_acm.o(i.cdc_acm_feed_descriptors) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[fd]">cdc_acm_req_out_data_cb</a> from app_usbd_cdc_acm.o(i.cdc_acm_req_out_data_cb) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[ff]">cdc_acm_single_shoot_consumer</a> from app_usbd_cdc_acm.o(i.cdc_acm_single_shoot_consumer) referenced from app_usbd_cdc_acm.o(.constdata)
 <LI><a href="#[156]">cdc_acm_user_ev_handler</a> from ser_phy_hci_slip_cdc.o(i.cdc_acm_user_ev_handler) referenced from ser_phy_hci_slip_cdc.o(.constdata)
 <LI><a href="#[cd]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[f9]">compare_func</a> from app_timer2.o(i.compare_func) referenced from app_timer2.o(.constdata)
 <LI><a href="#[110]">conn_mw_ble_cfg_set</a> from conn_mw_ble.o(i.conn_mw_ble_cfg_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10e]">conn_mw_ble_enable</a> from conn_mw_ble.o(i.conn_mw_ble_enable) referenced from conn_mw.o(.constdata)
 <LI><a href="#[117]">conn_mw_ble_gap_addr_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_addr_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[116]">conn_mw_ble_gap_addr_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_addr_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13a]">conn_mw_ble_gap_adv_set_configure</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_set_configure) referenced from conn_mw.o(.constdata)
 <LI><a href="#[122]">conn_mw_ble_gap_adv_start</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_start) referenced from conn_mw.o(.constdata)
 <LI><a href="#[123]">conn_mw_ble_gap_adv_stop</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_stop) referenced from conn_mw.o(.constdata)
 <LI><a href="#[128]">conn_mw_ble_gap_appearance_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_appearance_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[127]">conn_mw_ble_gap_appearance_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_appearance_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[12f]">conn_mw_ble_gap_auth_key_reply</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_auth_key_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[12d]">conn_mw_ble_gap_authenticate</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_authenticate) referenced from conn_mw.o(.constdata)
 <LI><a href="#[124]">conn_mw_ble_gap_conn_param_update</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_conn_param_update) referenced from conn_mw.o(.constdata)
 <LI><a href="#[130]">conn_mw_ble_gap_conn_sec_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_conn_sec_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11e]">conn_mw_ble_gap_connect</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_connect) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11f]">conn_mw_ble_gap_connect_cancel</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_connect_cancel) referenced from conn_mw.o(.constdata)
 <LI><a href="#[139]">conn_mw_ble_gap_data_length_update</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_data_length_update) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11b]">conn_mw_ble_gap_device_identities_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_identities_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[12c]">conn_mw_ble_gap_device_name_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_name_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[12b]">conn_mw_ble_gap_device_name_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_name_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[125]">conn_mw_ble_gap_disconnect</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_disconnect) referenced from conn_mw.o(.constdata)
 <LI><a href="#[120]">conn_mw_ble_gap_encrypt</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_encrypt) referenced from conn_mw.o(.constdata)
 <LI><a href="#[133]">conn_mw_ble_gap_keypress_notify</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_keypress_notify) referenced from conn_mw.o(.constdata)
 <LI><a href="#[134]">conn_mw_ble_gap_lesc_dhkey_reply</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_dhkey_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[136]">conn_mw_ble_gap_lesc_oob_data_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_oob_data_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[135]">conn_mw_ble_gap_lesc_oob_data_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_oob_data_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[138]">conn_mw_ble_gap_phy_update</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_phy_update) referenced from conn_mw.o(.constdata)
 <LI><a href="#[12a]">conn_mw_ble_gap_ppcp_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_ppcp_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[129]">conn_mw_ble_gap_ppcp_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_ppcp_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[119]">conn_mw_ble_gap_privacy_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_privacy_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[118]">conn_mw_ble_gap_privacy_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_privacy_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13b]">conn_mw_ble_gap_qos_channel_survey_start</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_qos_channel_survey_start) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13c]">conn_mw_ble_gap_qos_channel_survey_stop</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_qos_channel_survey_stop) referenced from conn_mw.o(.constdata)
 <LI><a href="#[137]">conn_mw_ble_gap_rssi_get</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[131]">conn_mw_ble_gap_rssi_start</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_start) referenced from conn_mw.o(.constdata)
 <LI><a href="#[132]">conn_mw_ble_gap_rssi_stop</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_stop) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11c]">conn_mw_ble_gap_scan_start</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_scan_start) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11d]">conn_mw_ble_gap_scan_stop</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_scan_stop) referenced from conn_mw.o(.constdata)
 <LI><a href="#[121]">conn_mw_ble_gap_sec_info_reply</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_sec_info_reply) referenced 2 times from conn_mw.o(.constdata)
 <LI><a href="#[12e]">conn_mw_ble_gap_sec_params_reply</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_sec_params_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[126]">conn_mw_ble_gap_tx_power_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_tx_power_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[11a]">conn_mw_ble_gap_whitelist_set</a> from conn_mw_ble_gap.o(i.conn_mw_ble_gap_whitelist_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[146]">conn_mw_ble_gattc_attr_info_discover</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_attr_info_discover) referenced from conn_mw.o(.constdata)
 <LI><a href="#[141]">conn_mw_ble_gattc_char_value_by_uuid_read</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_char_value_by_uuid_read) referenced from conn_mw.o(.constdata)
 <LI><a href="#[143]">conn_mw_ble_gattc_char_values_read</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_char_values_read) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13f]">conn_mw_ble_gattc_characteristics_discover</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_characteristics_discover) referenced from conn_mw.o(.constdata)
 <LI><a href="#[140]">conn_mw_ble_gattc_descriptors_discover</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_descriptors_discover) referenced from conn_mw.o(.constdata)
 <LI><a href="#[147]">conn_mw_ble_gattc_exchange_mtu_request</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_exchange_mtu_request) referenced from conn_mw.o(.constdata)
 <LI><a href="#[145]">conn_mw_ble_gattc_hv_confirm</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_hv_confirm) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13d]">conn_mw_ble_gattc_primary_services_discover</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_primary_services_discover) referenced from conn_mw.o(.constdata)
 <LI><a href="#[142]">conn_mw_ble_gattc_read</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_read) referenced from conn_mw.o(.constdata)
 <LI><a href="#[13e]">conn_mw_ble_gattc_relationships_discover</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_relationships_discover) referenced from conn_mw.o(.constdata)
 <LI><a href="#[144]">conn_mw_ble_gattc_write</a> from conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_write) referenced from conn_mw.o(.constdata)
 <LI><a href="#[154]">conn_mw_ble_gatts_attr_get</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_attr_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14a]">conn_mw_ble_gatts_characteristic_add</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_characteristic_add) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14b]">conn_mw_ble_gatts_descriptor_add</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_descriptor_add) referenced from conn_mw.o(.constdata)
 <LI><a href="#[155]">conn_mw_ble_gatts_exchange_mtu_reply</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_exchange_mtu_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14e]">conn_mw_ble_gatts_hvx</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_hvx) referenced from conn_mw.o(.constdata)
 <LI><a href="#[149]">conn_mw_ble_gatts_include_add</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_include_add) referenced from conn_mw.o(.constdata)
 <LI><a href="#[153]">conn_mw_ble_gatts_initial_user_handle_get</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_initial_user_handle_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[150]">conn_mw_ble_gatts_rw_authorize_reply</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_rw_authorize_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[148]">conn_mw_ble_gatts_service_add</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_service_add) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14f]">conn_mw_ble_gatts_service_changed</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_service_changed) referenced from conn_mw.o(.constdata)
 <LI><a href="#[152]">conn_mw_ble_gatts_sys_attr_get</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_sys_attr_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[151]">conn_mw_ble_gatts_sys_attr_set</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_sys_attr_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14d]">conn_mw_ble_gatts_value_get</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_value_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[14c]">conn_mw_ble_gatts_value_set</a> from conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_value_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10c]">conn_mw_ble_opt_get</a> from conn_mw_ble.o(i.conn_mw_ble_opt_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10d]">conn_mw_ble_opt_set</a> from conn_mw_ble.o(i.conn_mw_ble_opt_set) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10f]">conn_mw_ble_user_mem_reply</a> from conn_mw_ble.o(i.conn_mw_ble_user_mem_reply) referenced from conn_mw.o(.constdata)
 <LI><a href="#[109]">conn_mw_ble_uuid_decode</a> from conn_mw_ble.o(i.conn_mw_ble_uuid_decode) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10a]">conn_mw_ble_uuid_encode</a> from conn_mw_ble.o(i.conn_mw_ble_uuid_encode) referenced from conn_mw.o(.constdata)
 <LI><a href="#[108]">conn_mw_ble_uuid_vs_add</a> from conn_mw_ble.o(i.conn_mw_ble_uuid_vs_add) referenced from conn_mw.o(.constdata)
 <LI><a href="#[10b]">conn_mw_ble_version_get</a> from conn_mw_ble.o(i.conn_mw_ble_version_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[107]">conn_mw_ecb_block_encrypt</a> from conn_mw_nrf_soc.o(i.conn_mw_ecb_block_encrypt) referenced from conn_mw.o(.constdata)
 <LI><a href="#[115]">conn_mw_l2cap_ch_flow_control</a> from conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_flow_control) referenced from conn_mw.o(.constdata)
 <LI><a href="#[112]">conn_mw_l2cap_ch_release</a> from conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_release) referenced from conn_mw.o(.constdata)
 <LI><a href="#[113]">conn_mw_l2cap_ch_rx</a> from conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_rx) referenced from conn_mw.o(.constdata)
 <LI><a href="#[111]">conn_mw_l2cap_ch_setup</a> from conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_setup) referenced from conn_mw.o(.constdata)
 <LI><a href="#[114]">conn_mw_l2cap_ch_tx</a> from conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_tx) referenced from conn_mw.o(.constdata)
 <LI><a href="#[105]">conn_mw_power_system_off</a> from conn_mw_nrf_soc.o(i.conn_mw_power_system_off) referenced from conn_mw.o(.constdata)
 <LI><a href="#[106]">conn_mw_temp_get</a> from conn_mw_nrf_soc.o(i.conn_mw_temp_get) referenced from conn_mw.o(.constdata)
 <LI><a href="#[dd]">dfu_trigger_evt_handler</a> from nrf_dfu_trigger_usb.o(i.dfu_trigger_evt_handler) referenced from nrf_dfu_trigger_usb.o(.constdata)
 <LI><a href="#[e2]">ev_dma_epin0_handler</a> from nrfx_usbd.o(i.ev_dma_epin0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e3]">ev_dma_epin1_handler</a> from nrfx_usbd.o(i.ev_dma_epin1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e4]">ev_dma_epin2_handler</a> from nrfx_usbd.o(i.ev_dma_epin2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e5]">ev_dma_epin3_handler</a> from nrfx_usbd.o(i.ev_dma_epin3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e6]">ev_dma_epin4_handler</a> from nrfx_usbd.o(i.ev_dma_epin4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e7]">ev_dma_epin5_handler</a> from nrfx_usbd.o(i.ev_dma_epin5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e8]">ev_dma_epin6_handler</a> from nrfx_usbd.o(i.ev_dma_epin6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e9]">ev_dma_epin7_handler</a> from nrfx_usbd.o(i.ev_dma_epin7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[eb]">ev_dma_epin8_handler</a> from nrfx_usbd.o(i.ev_dma_epin8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[ec]">ev_dma_epout0_handler</a> from nrfx_usbd.o(i.ev_dma_epout0_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[ed]">ev_dma_epout1_handler</a> from nrfx_usbd.o(i.ev_dma_epout1_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[ee]">ev_dma_epout2_handler</a> from nrfx_usbd.o(i.ev_dma_epout2_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[ef]">ev_dma_epout3_handler</a> from nrfx_usbd.o(i.ev_dma_epout3_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f0]">ev_dma_epout4_handler</a> from nrfx_usbd.o(i.ev_dma_epout4_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f1]">ev_dma_epout5_handler</a> from nrfx_usbd.o(i.ev_dma_epout5_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f2]">ev_dma_epout6_handler</a> from nrfx_usbd.o(i.ev_dma_epout6_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f3]">ev_dma_epout7_handler</a> from nrfx_usbd.o(i.ev_dma_epout7_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f4]">ev_dma_epout8_handler</a> from nrfx_usbd.o(i.ev_dma_epout8_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f8]">ev_epdata_handler</a> from nrfx_usbd.o(i.ev_epdata_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[ea]">ev_setup_data_handler</a> from nrfx_usbd.o(i.ev_setup_data_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f7]">ev_setup_handler</a> from nrfx_usbd.o(i.ev_setup_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f5]">ev_sof_handler</a> from nrfx_usbd.o(i.ev_sof_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e1]">ev_started_handler</a> from nrfx_usbd.o(i.ev_started_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[f6]">ev_usbevent_handler</a> from nrfx_usbd.o(i.ev_usbevent_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[e0]">ev_usbreset_handler</a> from nrfx_usbd.o(i.ev_usbreset_handler) referenced from nrfx_usbd.o(.constdata)
 <LI><a href="#[d9]">hci_slip_event_handler</a> from ser_phy_hci.o(i.hci_slip_event_handler) referenced from ser_phy_hci.o(i.ser_phy_open)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[103]">nrf_dfu_trigger_event_handler</a> from app_usbd_nrf_dfu_trigger.o(i.nrf_dfu_trigger_event_handler) referenced from app_usbd_nrf_dfu_trigger.o(.constdata)
 <LI><a href="#[104]">nrf_dfu_trigger_feed_descriptors</a> from app_usbd_nrf_dfu_trigger.o(i.nrf_dfu_trigger_feed_descriptors) referenced from app_usbd_nrf_dfu_trigger.o(.constdata)
 <LI><a href="#[159]">nrf_drv_power_sdh_soc_evt_handler</a> from nrf_drv_power.o(i.nrf_drv_power_sdh_soc_evt_handler) referenced from nrf_drv_power.o(sdh_soc_observers0)
 <LI><a href="#[15d]">nrf_drv_power_sdh_state_evt_handler</a> from nrf_drv_power.o(i.nrf_drv_power_sdh_state_evt_handler) referenced from nrf_drv_power.o(sdh_state_observers0)
 <LI><a href="#[c9]">nrf_ecb_hal_data_t_in_dec</a> from nrf_soc_struct_serialization.o(i.nrf_ecb_hal_data_t_in_dec) referenced from nrf_soc_conn.o(i.ecb_block_encrypt_req_dec)
 <LI><a href="#[ca]">nrf_ecb_hal_data_t_out_enc</a> from nrf_soc_struct_serialization.o(i.nrf_ecb_hal_data_t_out_enc) referenced from nrf_soc_conn.o(i.ecb_block_encrypt_rsp_enc)
 <LI><a href="#[15a]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[15b]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[de]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[df]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[d5]">nrfx_usbd_consumer</a> from nrfx_usbd.o(i.nrfx_usbd_consumer) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[d4]">nrfx_usbd_feeder_flash</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[d2]">nrfx_usbd_feeder_flash_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[d3]">nrfx_usbd_feeder_ram</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[d1]">nrfx_usbd_feeder_ram_zlp</a> from nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp) referenced from nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
 <LI><a href="#[cc]">on_idle</a> from main.o(i.on_idle) referenced from main.o(i.main)
 <LI><a href="#[d8]">phy_events_handler</a> from ser_hal_transport.o(i.phy_events_handler) referenced from ser_hal_transport.o(i.ser_hal_transport_open)
 <LI><a href="#[3a]">rtc_irq</a> from app_timer2.o(i.rtc_irq) referenced from app_timer2.o(i.app_timer_init)
 <LI><a href="#[d6]">sd_start_from_app_sched</a> from ser_conn_reset_cmd_decoder.o(i.sd_start_from_app_sched) referenced from ser_conn_reset_cmd_decoder.o(i.sdh_observer_handler)
 <LI><a href="#[15c]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[15e]">sdh_observer_handler</a> from ser_conn_reset_cmd_decoder.o(i.sdh_observer_handler) referenced from ser_conn_reset_cmd_decoder.o(sdh_state_observers0)
 <LI><a href="#[d7]">ser_conn_ble_event_encoder</a> from ser_conn_event_encoder.o(i.ser_conn_ble_event_encoder) referenced from ser_conn_handlers.o(i.ser_conn_ble_event_handle)
 <LI><a href="#[157]">ser_conn_ble_event_handle</a> from ser_conn_handlers.o(i.ser_conn_ble_event_handle) referenced from ser_conn_handlers.o(sdh_ble_observers0)
 <LI><a href="#[cb]">ser_conn_hal_transport_event_handle</a> from ser_conn_handlers.o(i.ser_conn_hal_transport_event_handle) referenced from main.o(i.main)
 <LI><a href="#[100]">setup_data_handler_empty</a> from app_usbd_core.o(i.setup_data_handler_empty) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[158]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[da]">timer_handler</a> from ser_conn_reset_cmd_decoder.o(i.timer_handler) referenced from ser_conn_reset_cmd_decoder.o(i.soft_reset_trigger)
 <LI><a href="#[cf]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[ce]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[5b]">uint16_t_dec</a> from ble_serialization.o(i.uint16_t_dec) referenced from ble_gap_conn.o(i.ble_gap_device_name_get_req_dec)
 <LI><a href="#[5b]">uint16_t_dec</a> from ble_serialization.o(i.uint16_t_dec) referenced from ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_dec)
 <LI><a href="#[5b]">uint16_t_dec</a> from ble_serialization.o(i.uint16_t_dec) referenced from ble_gatts_struct_serialization.o(i.ble_gatts_hvx_params_t_dec)
 <LI><a href="#[5b]">uint16_t_dec</a> from ble_serialization.o(i.uint16_t_dec) referenced from ble_gatts_conn.o(i.ble_gatts_sys_attr_get_req_dec)
 <LI><a href="#[5b]">uint16_t_dec</a> from ble_serialization.o(i.uint16_t_dec) referenced from ble_l2cap_conn.o(i.ble_l2cap_ch_setup_req_dec)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gap_conn.o(i.ble_gap_appearance_get_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gap_conn.o(i.ble_gap_device_name_get_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_descriptor_add_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_hvx_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_include_add_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_initial_user_handle_get_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_service_add_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_gatts_conn.o(i.ble_gatts_sys_attr_get_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_l2cap_conn.o(i.ble_l2cap_ch_flow_control_rsp_enc)
 <LI><a href="#[50]">uint16_t_enc</a> from ble_serialization.o(i.uint16_t_enc) referenced from ble_l2cap_conn.o(i.ble_l2cap_ch_setup_rsp_enc)
 <LI><a href="#[db]">uint32_t_enc</a> from ble_serialization.o(i.uint32_t_enc) referenced from nrf_soc_conn.o(i.temp_get_rsp_enc)
 <LI><a href="#[4c]">uint8_t_dec</a> from ble_serialization.o(i.uint8_t_dec) referenced from ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
 <LI><a href="#[4f]">uint8_t_enc</a> from ble_serialization.o(i.uint8_t_enc) referenced from ble_gap_conn.o(i.ble_gap_adv_set_configure_rsp_enc)
 <LI><a href="#[4f]">uint8_t_enc</a> from ble_serialization.o(i.uint8_t_enc) referenced from ble_gap_conn.o(i.ble_gap_rssi_get_rsp_enc)
 <LI><a href="#[4f]">uint8_t_enc</a> from ble_serialization.o(i.uint8_t_enc) referenced from ble_conn.o(i.ble_uuid_vs_add_rsp_enc)
 <LI><a href="#[101]">usbd_descriptor_conf_feeder</a> from app_usbd_core.o(i.usbd_descriptor_conf_feeder) referenced from app_usbd_core.o(.constdata)
 <LI><a href="#[dc]">usbd_user_evt_handler</a> from main.o(i.usbd_user_evt_handler) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[3f7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[15f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[169]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3f9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3fb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3fc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3fd]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[3fe]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[38f]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[3ff]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[400]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[401]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[402]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[403]"></a>__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[356]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[161]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[357]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[162]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[404]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text), UNUSED)

<P><STRONG><a name="[35b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[405]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[35a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[406]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[359]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[407]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[408]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[35c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub_hs
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash_zlp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_flash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_fill
</UL>

<P><STRONG><a name="[409]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[40a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[40c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ea]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strings_create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_serial_num_generate
</UL>

<P><STRONG><a name="[2fc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pdu
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[160]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[40d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[40e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[40f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_power.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrfx_power_irq_handler &rArr; nrf_power_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_dtm.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RADIO_IRQHandler &rArr; radio_end_event_process &rArr; check_pdu &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_radio_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.RTC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 414 bytes, Stack size 12 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_dtm.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, ble_dtm.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable_check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_strict_mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anomaly_172_rssi_check
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anomaly_172_radio_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ser_phy_hci.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = TIMER2_IRQHandler &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_signal_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBD_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nrfx_usbd.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_IRQHandler &rArr; ev_setup_handler &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>__0snprintf$8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[412]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[1e9]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_serial_num_generate
</UL>

<P><STRONG><a name="[413]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[414]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[415]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[176]"></a>anomaly_172_radio_operation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_dtm.o(i.anomaly_172_radio_operation))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>anomaly_172_rssi_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ble_dtm.o(i.anomaly_172_rssi_check))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>app_error_fault_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ser_conn_error_handling.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[182]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_hal_transport_event_handle
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_put
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_ack_buffer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_transmit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_events_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_observer_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[185]"></a>app_sched_event_put</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_observer_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_handle
</UL>

<P><STRONG><a name="[351]"></a>app_sched_execute</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[349]"></a>app_sched_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>app_sched_pause</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_sched_pause &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_hal_transport_event_handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
</UL>

<P><STRONG><a name="[353]"></a>app_sched_queue_space_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_scheduler.o(i.app_sched_queue_space_get))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_handle
</UL>

<P><STRONG><a name="[188]"></a>app_sched_resume</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_sched_resume &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_hal_transport_event_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_events_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_observer_handler
</UL>

<P><STRONG><a name="[189]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.app_timer_cnt_get))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[3e5]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer2.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>

<P><STRONG><a name="[18b]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer2.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>app_timer_start</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_timer2.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>

<P><STRONG><a name="[193]"></a>app_usbd_all_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_usbd_all_call
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[195]"></a>app_usbd_all_iface_deselect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_iface_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_usbd_all_iface_deselect &rArr; app_usbd_iface_deselect &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[197]"></a>app_usbd_all_iface_select_0</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_iface_select_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = app_usbd_all_iface_select_0 &rArr; app_usbd_iface_select &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[199]"></a>app_usbd_all_until_served_call</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_all_until_served_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_usbd_all_until_served_call
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[19a]"></a>app_usbd_cdc_acm_read</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_usbd_cdc_acm.o(i.app_usbd_cdc_acm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = app_usbd_cdc_acm_read &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
</UL>

<P><STRONG><a name="[19d]"></a>app_usbd_cdc_acm_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_usbd_cdc_acm.o(i.app_usbd_cdc_acm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_put
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
</UL>

<P><STRONG><a name="[1a0]"></a>app_usbd_class_append</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, app_usbd.o(i.app_usbd_class_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_usbd_class_append &rArr; app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_trigger_usb_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_open
</UL>

<P><STRONG><a name="[3e2]"></a>app_usbd_class_descriptor_find</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, app_usbd.o(i.app_usbd_class_descriptor_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_usbd_class_descriptor_find
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[3e0]"></a>app_usbd_class_first_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_first_get))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[3e1]"></a>app_usbd_class_rwu_enabled_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_rwu_enabled_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[1a5]"></a>app_usbd_core_ep0_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_core.o(i.app_usbd_core_ep0_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = app_usbd_core_ep0_disable &rArr; app_usbd_ep_disable &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1a7]"></a>app_usbd_core_ep0_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_core.o(i.app_usbd_core_ep0_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = app_usbd_core_ep0_enable &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1b0]"></a>app_usbd_core_setup_data_handler_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_usbd_core.o(i.app_usbd_core_setup_data_handler_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_usbd_core_setup_data_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_last_setup_dir_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[1b9]"></a>app_usbd_core_setup_rsp</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, app_usbd_core.o(i.app_usbd_core_setup_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_get
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[1e7]"></a>app_usbd_core_setup_transfer_buff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usbd_core.o(i.app_usbd_core_setup_transfer_buff_get))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_prepare_string
</UL>

<P><STRONG><a name="[1bb]"></a>app_usbd_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = app_usbd_disable &rArr; nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_evt_handler
</UL>

<P><STRONG><a name="[1bd]"></a>app_usbd_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_usbd_enable &rArr; nrfx_usbd_enable &rArr; usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_evt_handler
</UL>

<P><STRONG><a name="[1b7]"></a>app_usbd_ep_call</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_usbd_ep_call
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[1a6]"></a>app_usbd_ep_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_usbd_ep_disable &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_disable
</UL>

<P><STRONG><a name="[1a8]"></a>app_usbd_ep_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
</UL>

<P><STRONG><a name="[19c]"></a>app_usbd_ep_handled_transfer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_ep_handled_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
</UL>

<P><STRONG><a name="[19f]"></a>app_usbd_ep_transfer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_ep_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[1cd]"></a>app_usbd_event_execute</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_event_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + In Cycle
<LI>Call Chain = app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_state_proc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_requested_hfclk
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_handler_call
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_force_bus_wakeup
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_enable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_ep0_disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1d9]"></a>app_usbd_event_queue_process</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, app_usbd.o(i.app_usbd_event_queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = app_usbd_event_queue_process &rArr; app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub_hs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle
</UL>

<P><STRONG><a name="[1b5]"></a>app_usbd_iface_call</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_iface_call))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[196]"></a>app_usbd_iface_deselect</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_iface_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_usbd_iface_deselect &rArr; nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
</UL>

<P><STRONG><a name="[1b4]"></a>app_usbd_iface_find</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_usbd.o(i.app_usbd_iface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_usbd_iface_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[198]"></a>app_usbd_iface_select</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_usbd.o(i.app_usbd_iface_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_usbd_iface_select &rArr; app_usbd_ep_enable &rArr; nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
</UL>

<P><STRONG><a name="[3e4]"></a>app_usbd_iface_selection_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_iface_selection_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
</UL>

<P><STRONG><a name="[1dd]"></a>app_usbd_init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, app_usbd.o(i.app_usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_usbd_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;class_event_handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_uninit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>app_usbd_power_events_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_power_events_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_usbd_power_events_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_initialized
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>app_usbd_serial_num_generate</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, app_usbd_serial_num.o(i.app_usbd_serial_num_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_usbd_serial_num_generate &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>app_usbd_start</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_usbd_start &rArr; app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_evt_handler
</UL>

<P><STRONG><a name="[1ec]"></a>app_usbd_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_usbd_stop &rArr; app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_evt_handler
</UL>

<P><STRONG><a name="[1ed]"></a>app_usbd_string_desc_get</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_usbd_string_desc.o(i.app_usbd_string_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_usbd_string_desc_get &rArr; app_usbd_prepare_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_prepare_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
</UL>

<P><STRONG><a name="[183]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_resume
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_pause
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_tx_pkt_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_disable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[184]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_resume
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_pause
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_tx_pkt_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_disable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[1f6]"></a>ble_cfg_set_req_dec</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ble_conn.o(i.ble_cfg_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_cfg_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_cfg_set
</UL>

<P><STRONG><a name="[1fa]"></a>ble_cfg_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn.o(i.ble_cfg_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_cfg_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_cfg_set
</UL>

<P><STRONG><a name="[41]"></a>ble_common_cfg_vs_uuid_t_dec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_struct_serialization.o(i.ble_common_cfg_vs_uuid_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_common_cfg_vs_uuid_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[bf]"></a>ble_common_opt_conn_evt_ext_t_dec</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_struct_serialization.o(i.ble_common_opt_conn_evt_ext_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_common_opt_conn_evt_ext_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[b8]"></a>ble_common_opt_conn_evt_ext_t_enc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_struct_serialization.o(i.ble_common_opt_conn_evt_ext_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_common_opt_conn_evt_ext_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[be]"></a>ble_common_opt_pa_lna_t_dec</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_common_opt_pa_lna_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[b7]"></a>ble_common_opt_pa_lna_t_enc</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_common_opt_pa_lna_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[49]"></a>ble_data_t_dec</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ble_struct_serialization.o(i.ble_data_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_data_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_ble_data_buf_alloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_scan_start_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_dec)
</UL>
<P><STRONG><a name="[4a]"></a>ble_data_t_enc</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ble_struct_serialization.o(i.ble_data_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_data_t_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_ble_data_buf_free
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_timeout_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_enc)
</UL>
<P><STRONG><a name="[202]"></a>ble_dtm_init_req_dec</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_dtm_init.o(i.ble_dtm_init_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dtm_init_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
</UL>

<P><STRONG><a name="[203]"></a>ble_dtm_init_rsp_enc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_dtm_init.o(i.ble_dtm_init_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dtm_init_rsp_enc &rArr; uint32_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
</UL>

<P><STRONG><a name="[302]"></a>ble_enable_req_dec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn.o(i.ble_enable_req_dec))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_enable
</UL>

<P><STRONG><a name="[204]"></a>ble_enable_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn.o(i.ble_enable_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_enable_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_enable
</UL>

<P><STRONG><a name="[205]"></a>ble_event_enc</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, ble_event_enc.o(i.ble_event_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_event_enc &rArr; ble_gatts_evt_write_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_tx_enc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_request_enc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_refused_enc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_enc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_sdu_buf_released_enc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_rx_enc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_released_enc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_credit_enc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_enc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_timeout_enc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sys_attr_missing_enc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sc_confirm_enc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_enc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvn_tx_complete_enc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvc_enc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_exchange_mtu_request_enc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_enc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_cmd_tx_complete_enc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_timeout_enc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_rel_disc_rsp_enc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_read_rsp_enc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_prim_srvc_disc_rsp_enc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_enc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_exchange_mtu_rsp_enc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_desc_disc_rsp_enc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_vals_read_rsp_enc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_val_by_uuid_read_rsp_enc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_disc_rsp_enc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_enc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_timeout_enc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_request_enc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_params_request_enc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_info_request_enc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_scan_req_report_enc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_rssi_changed_enc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_qos_channel_survey_report_enc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_request_enc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_enc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_passkey_display_enc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_lesc_dhkey_request_enc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_key_pressed_enc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_enc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_request_enc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_enc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_connected_enc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_sec_update_enc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_request_enc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_enc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_enc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_key_request_enc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_set_terminated_enc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_enc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_request_enc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_release_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
</UL>

<P><STRONG><a name="[206]"></a>ble_evt_user_mem_release_enc</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ble_evt_conn.o(i.ble_evt_user_mem_release_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_evt_user_mem_release_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_user_mem_context_destroy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[207]"></a>ble_evt_user_mem_request_enc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_evt_conn.o(i.ble_evt_user_mem_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_evt_user_mem_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[23e]"></a>ble_gap_addr_get_req_dec</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_addr_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_addr_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_addr_get
</UL>

<P><STRONG><a name="[23f]"></a>ble_gap_addr_get_rsp_enc</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, ble_gap_conn.o(i.ble_gap_addr_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_gap_addr_get_rsp_enc &rArr; ble_gap_addr_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_addr_get
</UL>

<P><STRONG><a name="[240]"></a>ble_gap_addr_set_req_dec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_addr_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_gap_addr_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_addr_set
</UL>

<P><STRONG><a name="[241]"></a>ble_gap_addr_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_addr_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_addr_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_addr_set
</UL>

<P><STRONG><a name="[48]"></a>ble_gap_addr_t_dec</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_addr_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_addr_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ble_gap_conn.o(i.ble_gap_addr_set_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_connect_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_whitelist_set_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec)
</UL>
<P><STRONG><a name="[62]"></a>ble_gap_addr_t_enc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_addr_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_addr_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_rsp_enc
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_scan_req_report_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_enc)
</UL>
<P><STRONG><a name="[4d]"></a>ble_gap_adv_data_t_dec</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_adv_data_t_dec &rArr; field_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
</UL>
<P><STRONG><a name="[65]"></a>ble_gap_adv_data_t_enc</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_adv_data_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_adv_data_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_adv_set_terminated_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
</UL>
<P><STRONG><a name="[4e]"></a>ble_gap_adv_params_t_dec</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_gap_adv_params_t_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
</UL>
<P><STRONG><a name="[4b]"></a>ble_gap_adv_properties_t_dec</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_adv_properties_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_adv_properties_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_adv_params_t_dec)
</UL>
<P><STRONG><a name="[61]"></a>ble_gap_adv_report_type_t_enc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_adv_report_type_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_adv_report_type_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
</UL>
<P><STRONG><a name="[247]"></a>ble_gap_adv_set_configure_req_dec</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_adv_set_configure_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_set_configure
</UL>

<P><STRONG><a name="[248]"></a>ble_gap_adv_set_configure_rsp_enc</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_adv_set_configure_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_adv_set_configure_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_set_configure
</UL>

<P><STRONG><a name="[249]"></a>ble_gap_adv_start_req_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_adv_start_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_adv_start_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_start
</UL>

<P><STRONG><a name="[24a]"></a>ble_gap_adv_start_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_adv_start_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_adv_start_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_start
</UL>

<P><STRONG><a name="[24b]"></a>ble_gap_adv_stop_req_dec</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_adv_stop_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_adv_stop_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_stop
</UL>

<P><STRONG><a name="[24c]"></a>ble_gap_adv_stop_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_adv_stop_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_adv_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_stop
</UL>

<P><STRONG><a name="[24d]"></a>ble_gap_appearance_get_req_dec</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_appearance_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_appearance_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_appearance_get
</UL>

<P><STRONG><a name="[24e]"></a>ble_gap_appearance_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_appearance_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_appearance_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_appearance_get
</UL>

<P><STRONG><a name="[24f]"></a>ble_gap_appearance_set_req_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_appearance_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_appearance_set_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_appearance_set
</UL>

<P><STRONG><a name="[250]"></a>ble_gap_appearance_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_appearance_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_appearance_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_appearance_set
</UL>

<P><STRONG><a name="[251]"></a>ble_gap_auth_key_reply_req_dec</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_auth_key_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_gap_auth_key_reply_req_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_auth_key_reply
</UL>

<P><STRONG><a name="[252]"></a>ble_gap_auth_key_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_auth_key_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_auth_key_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_auth_key_reply
</UL>

<P><STRONG><a name="[253]"></a>ble_gap_authenticate_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_authenticate_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_authenticate_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_authenticate
</UL>

<P><STRONG><a name="[254]"></a>ble_gap_authenticate_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_authenticate_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_authenticate_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_authenticate
</UL>

<P><STRONG><a name="[63]"></a>ble_gap_aux_pointer_t_enc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_aux_pointer_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_aux_pointer_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc)
</UL>
<P><STRONG><a name="[43]"></a>ble_gap_cfg_device_name_t_dec</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ble_gap_struct_serialization.o(i.ble_gap_cfg_device_name_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_gap_cfg_device_name_t_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[42]"></a>ble_gap_cfg_role_count_t_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_cfg_role_count_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_cfg_role_count_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[3c]"></a>ble_gap_conn_cfg_t_dec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_conn_cfg_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[255]"></a>ble_gap_conn_param_update_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_conn_param_update_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_conn_param_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_conn_param_update
</UL>

<P><STRONG><a name="[256]"></a>ble_gap_conn_param_update_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_conn_param_update_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_conn_param_update_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_conn_param_update
</UL>

<P><STRONG><a name="[53]"></a>ble_gap_conn_params_t_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_conn_params_t_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ble_gap_conn.o(i.ble_gap_conn_param_update_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_connect_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_ppcp_set_req_dec)
</UL>
<P><STRONG><a name="[6c]"></a>ble_gap_conn_params_t_enc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_params_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_conn_params_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ble_gap_conn.o(i.ble_gap_ppcp_get_rsp_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_request_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc)
</UL>
<P><STRONG><a name="[257]"></a>ble_gap_conn_sec_get_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_conn_sec_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_conn_sec_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_conn_sec_get
</UL>

<P><STRONG><a name="[258]"></a>ble_gap_conn_sec_get_rsp_enc</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_conn_sec_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_conn_sec_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_conn_sec_get
</UL>

<P><STRONG><a name="[52]"></a>ble_gap_conn_sec_mode_t_dec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_conn_sec_mode_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_cfg_device_name_t_dec)
<LI> ble_gap_conn.o(i.ble_gap_device_name_set_req_dec)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_dec)
</UL>
<P><STRONG><a name="[55]"></a>ble_gap_conn_sec_mode_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_sec_mode_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gap_conn_sec_mode_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_conn_sec_t_enc)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_enc)
</UL>
<P><STRONG><a name="[54]"></a>ble_gap_conn_sec_t_enc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_conn_sec_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_conn_sec_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_conn_sec_get_rsp_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_conn_sec_update_t_enc)
</UL>
<P><STRONG><a name="[259]"></a>ble_gap_connect_cancel_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_connect_cancel_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_connect_cancel_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_connect_cancel
</UL>

<P><STRONG><a name="[25a]"></a>ble_gap_connect_req_dec</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_connect_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_connect_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_connect
</UL>

<P><STRONG><a name="[25b]"></a>ble_gap_connect_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_connect_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_connect_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_connect
</UL>

<P><STRONG><a name="[58]"></a>ble_gap_data_length_limitation_t_enc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_data_length_limitation_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_data_length_limitation_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_data_length_update_rsp_enc)
</UL>
<P><STRONG><a name="[57]"></a>ble_gap_data_length_params_t_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_data_length_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_data_length_params_t_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_data_length_update_req_dec)
</UL>
<P><STRONG><a name="[6f]"></a>ble_gap_data_length_params_t_enc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_data_length_params_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_data_length_params_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_enc)
<LI> ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_request_enc)
</UL>
<P><STRONG><a name="[25c]"></a>ble_gap_data_length_update_req_dec</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_data_length_update_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_data_length_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_data_length_update
</UL>

<P><STRONG><a name="[25d]"></a>ble_gap_data_length_update_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_data_length_update_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_data_length_update_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_data_length_update
</UL>

<P><STRONG><a name="[25e]"></a>ble_gap_device_identities_set_req_dec</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_device_identities_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ble_gap_device_identities_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_identities_set
</UL>

<P><STRONG><a name="[25f]"></a>ble_gap_device_identities_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_device_identities_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_device_identities_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_identities_set
</UL>

<P><STRONG><a name="[260]"></a>ble_gap_device_name_get_req_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_device_name_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_device_name_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_name_get
</UL>

<P><STRONG><a name="[261]"></a>ble_gap_device_name_get_rsp_enc</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, ble_gap_conn.o(i.ble_gap_device_name_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_gap_device_name_get_rsp_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_name_get
</UL>

<P><STRONG><a name="[262]"></a>ble_gap_device_name_set_req_dec</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_device_name_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_gap_device_name_set_req_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_name_set
</UL>

<P><STRONG><a name="[263]"></a>ble_gap_device_name_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_device_name_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_device_name_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_device_name_set
</UL>

<P><STRONG><a name="[264]"></a>ble_gap_disconnect_req_dec</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_disconnect_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_disconnect_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_disconnect
</UL>

<P><STRONG><a name="[265]"></a>ble_gap_disconnect_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_disconnect_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_disconnect_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_disconnect
</UL>

<P><STRONG><a name="[5c]"></a>ble_gap_enc_info_t_dec</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_enc_info_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ble_gap_conn.o(i.ble_gap_encrypt_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec)
</UL>
<P><STRONG><a name="[5e]"></a>ble_gap_enc_info_t_enc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_enc_info_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_enc_info_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc)
</UL>
<P><STRONG><a name="[80]"></a>ble_gap_enc_key_t_dec</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_enc_key_t_dec &rArr; field_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
</UL>
<P><STRONG><a name="[81]"></a>ble_gap_enc_key_t_enc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_enc_key_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
</UL>
<P><STRONG><a name="[266]"></a>ble_gap_encrypt_req_dec</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_encrypt_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_encrypt_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_encrypt
</UL>

<P><STRONG><a name="[267]"></a>ble_gap_encrypt_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_encrypt_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_encrypt_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_encrypt
</UL>

<P><STRONG><a name="[23a]"></a>ble_gap_evt_adv_report_enc</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_adv_report_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_adv_report_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_scan_data_unset
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[60]"></a>ble_gap_evt_adv_report_t_enc</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_adv_report_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_adv_report_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_adv_report_enc)
</UL>
<P><STRONG><a name="[21a]"></a>ble_gap_evt_adv_set_terminated_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_adv_set_terminated_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_adv_set_terminated_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[64]"></a>ble_gap_evt_adv_set_terminated_t_enc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_adv_set_terminated_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_evt_adv_set_terminated_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_adv_set_terminated_enc)
</UL>
<P><STRONG><a name="[20e]"></a>ble_gap_evt_auth_key_request_enc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_auth_key_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_auth_key_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[20c]"></a>ble_gap_evt_auth_status_enc</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_auth_status_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_evt_auth_status_enc &rArr; conn_ble_gap_sec_context_find
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_find
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_destroy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[66]"></a>ble_gap_evt_auth_status_t_enc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_auth_status_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_auth_status_enc)
</UL>
<P><STRONG><a name="[208]"></a>ble_gap_evt_conn_param_update_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_conn_param_update_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[209]"></a>ble_gap_evt_conn_param_update_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_conn_param_update_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[6b]"></a>ble_gap_evt_conn_param_update_request_t_enc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_evt_conn_param_update_request_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_request_enc)
</UL>
<P><STRONG><a name="[6a]"></a>ble_gap_evt_conn_param_update_t_enc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_conn_param_update_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_evt_conn_param_update_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_conn_param_update_enc)
</UL>
<P><STRONG><a name="[20f]"></a>ble_gap_evt_conn_sec_update_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_conn_sec_update_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_conn_sec_update_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[6d]"></a>ble_gap_evt_conn_sec_update_t_enc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_conn_sec_update_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_evt_conn_sec_update_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_conn_sec_update_enc)
</UL>
<P><STRONG><a name="[213]"></a>ble_gap_evt_connected_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_connected_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_connected_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[6e]"></a>ble_gap_evt_connected_t_enc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_connected_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_evt_connected_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_connected_enc)
</UL>
<P><STRONG><a name="[21c]"></a>ble_gap_evt_data_length_update_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_data_length_update_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[21b]"></a>ble_gap_evt_data_length_update_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_data_length_update_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_data_length_update_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[212]"></a>ble_gap_evt_disconnected_enc</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_disconnected_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_evt_disconnected_enc &rArr; conn_ble_gap_sec_context_find
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_find
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_destroy
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[70]"></a>ble_gap_evt_disconnected_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_disconnected_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_evt_disconnected_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_disconnected_enc)
</UL>
<P><STRONG><a name="[215]"></a>ble_gap_evt_key_pressed_enc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_key_pressed_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_key_pressed_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[216]"></a>ble_gap_evt_lesc_dhkey_request_enc</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_lesc_dhkey_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_evt_lesc_dhkey_request_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[20d]"></a>ble_gap_evt_passkey_display_enc</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_passkey_display_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_evt_passkey_display_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[217]"></a>ble_gap_evt_phy_update_enc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_phy_update_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_phy_update_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[218]"></a>ble_gap_evt_phy_update_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_phy_update_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_phy_update_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[219]"></a>ble_gap_evt_qos_channel_survey_report_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_qos_channel_survey_report_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_gap_evt_qos_channel_survey_report_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[210]"></a>ble_gap_evt_rssi_changed_enc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_rssi_changed_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_rssi_changed_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[23b]"></a>ble_gap_evt_scan_req_report_enc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_scan_req_report_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_scan_req_report_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[20b]"></a>ble_gap_evt_sec_info_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_sec_info_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_sec_info_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[73]"></a>ble_gap_evt_sec_info_request_t_enc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_evt_sec_info_request_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_sec_info_request_enc)
</UL>
<P><STRONG><a name="[20a]"></a>ble_gap_evt_sec_params_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_sec_params_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_sec_params_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[74]"></a>ble_gap_evt_sec_params_request_t_enc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_sec_params_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_evt_sec_params_request_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_sec_params_request_enc)
</UL>
<P><STRONG><a name="[214]"></a>ble_gap_evt_sec_request_enc</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_sec_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_sec_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[76]"></a>ble_gap_evt_sec_request_t_enc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_evt_sec_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_evt_sec_request_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_sec_request_enc)
</UL>
<P><STRONG><a name="[211]"></a>ble_gap_evt_timeout_enc</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_gap_evt_conn.o(i.ble_gap_evt_timeout_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_evt_timeout_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[59]"></a>ble_gap_id_key_t_dec</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_id_key_t_dec &rArr; field_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_device_identities_set_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
</UL>
<P><STRONG><a name="[82]"></a>ble_gap_id_key_t_enc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_id_key_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
</UL>
<P><STRONG><a name="[5a]"></a>ble_gap_irk_t_dec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_irk_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_irk_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ble_gap_conn.o(i.ble_gap_device_identities_set_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_id_key_t_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_dec)
</UL>
<P><STRONG><a name="[77]"></a>ble_gap_irk_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_irk_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_irk_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_id_key_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_enc)
</UL>
<P><STRONG><a name="[26c]"></a>ble_gap_keypress_notify_req_dec</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_keypress_notify_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_keypress_notify_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_keypress_notify
</UL>

<P><STRONG><a name="[26d]"></a>ble_gap_keypress_notify_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_keypress_notify_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_keypress_notify_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_keypress_notify
</UL>

<P><STRONG><a name="[26e]"></a>ble_gap_lesc_dhkey_reply_req_dec</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_lesc_dhkey_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_lesc_dhkey_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_dhkey_reply
</UL>

<P><STRONG><a name="[26f]"></a>ble_gap_lesc_dhkey_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_lesc_dhkey_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_lesc_dhkey_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_dhkey_reply
</UL>

<P><STRONG><a name="[78]"></a>ble_gap_lesc_dhkey_t_dec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_lesc_dhkey_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_lesc_dhkey_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_lesc_dhkey_reply_req_dec)
</UL>
<P><STRONG><a name="[270]"></a>ble_gap_lesc_oob_data_get_req_dec</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_lesc_oob_data_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_oob_data_get
</UL>

<P><STRONG><a name="[271]"></a>ble_gap_lesc_oob_data_get_rsp_enc</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_lesc_oob_data_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_oob_data_get
</UL>

<P><STRONG><a name="[272]"></a>ble_gap_lesc_oob_data_set_req_dec</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_lesc_oob_data_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_lesc_oob_data_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_oob_data_set
</UL>

<P><STRONG><a name="[273]"></a>ble_gap_lesc_oob_data_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_lesc_oob_data_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_lesc_oob_data_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_lesc_oob_data_set
</UL>

<P><STRONG><a name="[7b]"></a>ble_gap_lesc_oob_data_t_dec</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_lesc_oob_data_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_lesc_oob_data_set_req_dec)
</UL>
<P><STRONG><a name="[7a]"></a>ble_gap_lesc_oob_data_t_enc</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_lesc_oob_data_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_lesc_oob_data_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_rsp_enc)
</UL>
<P><STRONG><a name="[79]"></a>ble_gap_lesc_p256_pk_t_dec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_lesc_p256_pk_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_lesc_oob_data_get_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
</UL>
<P><STRONG><a name="[71]"></a>ble_gap_lesc_p256_pk_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_lesc_p256_pk_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_lesc_p256_pk_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_lesc_dhkey_request_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
</UL>
<P><STRONG><a name="[5d]"></a>ble_gap_master_id_t_dec</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_master_id_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_master_id_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_encrypt_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_dec)
</UL>
<P><STRONG><a name="[5f]"></a>ble_gap_master_id_t_enc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_master_id_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_master_id_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_enc_key_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_evt_sec_info_request_t_enc)
</UL>
<P><STRONG><a name="[c3]"></a>ble_gap_opt_auth_payload_timeout_t_dec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_auth_payload_timeout_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_opt_auth_payload_timeout_t_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[bc]"></a>ble_gap_opt_auth_payload_timeout_t_enc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_auth_payload_timeout_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_opt_auth_payload_timeout_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[c0]"></a>ble_gap_opt_ch_map_t_dec</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_ch_map_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_opt_ch_map_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[b9]"></a>ble_gap_opt_ch_map_t_enc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_ch_map_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_opt_ch_map_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[c4]"></a>ble_gap_opt_compat_mode_1_t_dec</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_compat_mode_1_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_opt_compat_mode_1_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[bd]"></a>ble_gap_opt_compat_mode_1_t_enc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_compat_mode_1_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gap_opt_compat_mode_1_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[c1]"></a>ble_gap_opt_local_conn_latency_t_dec</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_opt_local_conn_latency_t_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[ba]"></a>ble_gap_opt_local_conn_latency_t_enc</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_opt_local_conn_latency_t_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[c2]"></a>ble_gap_opt_passkey_t_dec</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_passkey_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_opt_passkey_t_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[bb]"></a>ble_gap_opt_passkey_t_enc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_passkey_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gap_opt_passkey_t_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_get_rsp_enc)
</UL>
<P><STRONG><a name="[c5]"></a>ble_gap_opt_slave_latency_disable_t_dec</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_opt_slave_latency_disable_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_opt_slave_latency_disable_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_opt_set_req_dec)
</UL>
<P><STRONG><a name="[275]"></a>ble_gap_phy_update_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_phy_update_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_phy_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_phy_update
</UL>

<P><STRONG><a name="[276]"></a>ble_gap_phy_update_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_phy_update_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_phy_update_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_phy_update
</UL>

<P><STRONG><a name="[7c]"></a>ble_gap_phys_t_dec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_phys_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_phys_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_phy_update_req_dec)
</UL>
<P><STRONG><a name="[72]"></a>ble_gap_phys_t_enc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_phys_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_phys_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_phy_update_request_enc)
</UL>
<P><STRONG><a name="[277]"></a>ble_gap_ppcp_get_req_dec</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ble_gap_conn.o(i.ble_gap_ppcp_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_ppcp_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_ppcp_get
</UL>

<P><STRONG><a name="[278]"></a>ble_gap_ppcp_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_ppcp_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_ppcp_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_ppcp_get
</UL>

<P><STRONG><a name="[279]"></a>ble_gap_ppcp_set_req_dec</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_ppcp_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_gap_ppcp_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_ppcp_set
</UL>

<P><STRONG><a name="[27a]"></a>ble_gap_ppcp_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_ppcp_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_ppcp_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_ppcp_set
</UL>

<P><STRONG><a name="[27b]"></a>ble_gap_privacy_get_req_dec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_privacy_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_gap_privacy_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_privacy_get
</UL>

<P><STRONG><a name="[27c]"></a>ble_gap_privacy_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_privacy_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_privacy_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_privacy_get
</UL>

<P><STRONG><a name="[7d]"></a>ble_gap_privacy_params_t_dec</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_privacy_params_t_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_privacy_get_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_privacy_set_req_dec)
</UL>
<P><STRONG><a name="[7e]"></a>ble_gap_privacy_params_t_enc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_privacy_params_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_privacy_params_t_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_privacy_get_rsp_enc)
</UL>
<P><STRONG><a name="[27d]"></a>ble_gap_privacy_set_req_dec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_privacy_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ble_gap_privacy_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_privacy_set
</UL>

<P><STRONG><a name="[27e]"></a>ble_gap_privacy_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_privacy_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_privacy_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_privacy_set
</UL>

<P><STRONG><a name="[27f]"></a>ble_gap_qos_channel_survey_start_req_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_qos_channel_survey_start_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_qos_channel_survey_start_req_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_qos_channel_survey_start
</UL>

<P><STRONG><a name="[280]"></a>ble_gap_qos_channel_survey_start_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_qos_channel_survey_start_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_qos_channel_survey_start_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_qos_channel_survey_start
</UL>

<P><STRONG><a name="[304]"></a>ble_gap_qos_channel_survey_stop_req_dec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_qos_channel_survey_stop_req_dec))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_qos_channel_survey_stop
</UL>

<P><STRONG><a name="[281]"></a>ble_gap_qos_channel_survey_stop_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_qos_channel_survey_stop_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_qos_channel_survey_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_qos_channel_survey_stop
</UL>

<P><STRONG><a name="[282]"></a>ble_gap_rssi_get_req_dec</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_rssi_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_rssi_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_get
</UL>

<P><STRONG><a name="[283]"></a>ble_gap_rssi_get_rsp_enc</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, ble_gap_conn.o(i.ble_gap_rssi_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gap_rssi_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_get
</UL>

<P><STRONG><a name="[284]"></a>ble_gap_rssi_start_req_dec</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_rssi_start_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_rssi_start_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_start
</UL>

<P><STRONG><a name="[285]"></a>ble_gap_rssi_start_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_rssi_start_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_rssi_start_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_start
</UL>

<P><STRONG><a name="[286]"></a>ble_gap_rssi_stop_req_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_gap_conn.o(i.ble_gap_rssi_stop_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_rssi_stop_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_stop
</UL>

<P><STRONG><a name="[287]"></a>ble_gap_rssi_stop_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_rssi_stop_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_rssi_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_rssi_stop
</UL>

<P><STRONG><a name="[56]"></a>ble_gap_scan_params_t_dec</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, ble_gap_struct_serialization.o(i.ble_gap_scan_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_gap_scan_params_t_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_connect_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_scan_start_req_dec)
</UL>
<P><STRONG><a name="[288]"></a>ble_gap_scan_start_req_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_scan_start_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gap_scan_start_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_start
</UL>

<P><STRONG><a name="[289]"></a>ble_gap_scan_start_rsp_enc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_scan_start_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_scan_start_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_start
</UL>

<P><STRONG><a name="[28a]"></a>ble_gap_scan_stop_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_scan_stop_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_scan_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_stop
</UL>

<P><STRONG><a name="[28b]"></a>ble_gap_sec_info_reply_req_dec</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_sec_info_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_info_reply
</UL>

<P><STRONG><a name="[28c]"></a>ble_gap_sec_info_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_sec_info_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_sec_info_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_info_reply
</UL>

<P><STRONG><a name="[87]"></a>ble_gap_sec_kdist_t_dec</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_kdist_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_sec_kdist_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_dec)
</UL>
<P><STRONG><a name="[69]"></a>ble_gap_sec_kdist_t_enc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_kdist_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_sec_kdist_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_enc)
</UL>
<P><STRONG><a name="[84]"></a>ble_gap_sec_keys_t_dec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gap_sec_keys_t_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_dec)
</UL>
<P><STRONG><a name="[85]"></a>ble_gap_sec_keys_t_enc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_sec_keys_t_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_enc)
</UL>
<P><STRONG><a name="[86]"></a>ble_gap_sec_keyset_t_dec</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_sec_keyset_t_dec &rArr; field_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_sec_params_reply_req_dec)
</UL>
<P><STRONG><a name="[67]"></a>ble_gap_sec_keyset_t_enc</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_keyset_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_sec_keyset_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_evt_conn.o(i.ble_gap_evt_auth_status_enc)
<LI> ble_gap_conn.o(i.ble_gap_sec_params_reply_rsp_enc)
</UL>
<P><STRONG><a name="[68]"></a>ble_gap_sec_levels_t_enc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_levels_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_sec_levels_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_auth_status_t_enc)
</UL>
<P><STRONG><a name="[28d]"></a>ble_gap_sec_params_reply_req_dec</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ble_gap_conn.o(i.ble_gap_sec_params_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gap_sec_params_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_params_reply
</UL>

<P><STRONG><a name="[28e]"></a>ble_gap_sec_params_reply_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gap_conn.o(i.ble_gap_sec_params_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gap_sec_params_reply_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_params_reply
</UL>

<P><STRONG><a name="[51]"></a>ble_gap_sec_params_t_dec</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_sec_params_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_authenticate_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_sec_params_reply_req_dec)
</UL>
<P><STRONG><a name="[75]"></a>ble_gap_sec_params_t_enc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ble_gap_struct_serialization.o(i.ble_gap_sec_params_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_sec_params_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_evt_sec_params_request_t_enc)
</UL>
<P><STRONG><a name="[7f]"></a>ble_gap_sign_info_t_dec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_gap_struct_serialization.o(i.ble_gap_sign_info_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gap_sign_info_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gap_conn.o(i.ble_gap_sec_info_reply_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_dec)
</UL>
<P><STRONG><a name="[83]"></a>ble_gap_sign_info_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.ble_gap_sign_info_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gap_sign_info_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_struct_serialization.o(i.ble_gap_sec_keys_t_enc)
</UL>
<P><STRONG><a name="[28f]"></a>ble_gap_tx_power_set_req_dec</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_gap_conn.o(i.ble_gap_tx_power_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gap_tx_power_set_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_tx_power_set
</UL>

<P><STRONG><a name="[290]"></a>ble_gap_tx_power_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_tx_power_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_tx_power_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_tx_power_set
</UL>

<P><STRONG><a name="[291]"></a>ble_gap_whitelist_set_req_dec</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ble_gap_conn.o(i.ble_gap_whitelist_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_gap_whitelist_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_whitelist_set
</UL>

<P><STRONG><a name="[292]"></a>ble_gap_whitelist_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gap_conn.o(i.ble_gap_whitelist_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gap_whitelist_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_whitelist_set
</UL>

<P><STRONG><a name="[a4]"></a>ble_gatt_char_ext_props_t_dec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_gatt_struct_serialization.o(i.ble_gatt_char_ext_props_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gatt_char_ext_props_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
</UL>
<P><STRONG><a name="[a3]"></a>ble_gatt_char_props_t_dec</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_gatt_struct_serialization.o(i.ble_gatt_char_props_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gatt_char_props_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
</UL>
<P><STRONG><a name="[8b]"></a>ble_gatt_char_props_t_enc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ble_gatt_struct_serialization.o(i.ble_gatt_char_props_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gatt_char_props_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc)
</UL>
<P><STRONG><a name="[3f]"></a>ble_gatt_conn_cfg_t_dec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatt_struct_serialization.o(i.ble_gatt_conn_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatt_conn_cfg_t_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[8e]"></a>ble_gattc_attr_info128_t_enc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_attr_info128_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_attr_info128_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc)
</UL>
<P><STRONG><a name="[8f]"></a>ble_gattc_attr_info16_t_enc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_attr_info16_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_attr_info16_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc)
</UL>
<P><STRONG><a name="[294]"></a>ble_gattc_attr_info_discover_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_attr_info_discover_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_attr_info_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_attr_info_discover
</UL>

<P><STRONG><a name="[295]"></a>ble_gattc_attr_info_discover_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_attr_info_discover_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_attr_info_discover_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_attr_info_discover
</UL>

<P><STRONG><a name="[91]"></a>ble_gattc_char_t_enc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_char_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_disc_rsp_t_enc)
</UL>
<P><STRONG><a name="[296]"></a>ble_gattc_char_value_by_uuid_read_req_dec</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_char_value_by_uuid_read_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_char_value_by_uuid_read
</UL>

<P><STRONG><a name="[297]"></a>ble_gattc_char_value_by_uuid_read_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_char_value_by_uuid_read_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_char_value_by_uuid_read
</UL>

<P><STRONG><a name="[298]"></a>ble_gattc_char_values_read_req_dec</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_char_values_read_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_gattc_char_values_read_req_dec &rArr; count16_cond_data16_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count16_cond_data16_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_char_values_read
</UL>

<P><STRONG><a name="[29a]"></a>ble_gattc_char_values_read_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_char_values_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_char_values_read_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_char_values_read
</UL>

<P><STRONG><a name="[29b]"></a>ble_gattc_characteristics_discover_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_characteristics_discover_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_characteristics_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_characteristics_discover
</UL>

<P><STRONG><a name="[29c]"></a>ble_gattc_characteristics_discover_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_characteristics_discover_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_characteristics_discover_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_characteristics_discover
</UL>

<P><STRONG><a name="[3d]"></a>ble_gattc_conn_cfg_t_dec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_conn_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_conn_cfg_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[95]"></a>ble_gattc_desc_t_enc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_desc_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_desc_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_desc_disc_rsp_t_enc)
</UL>
<P><STRONG><a name="[29d]"></a>ble_gattc_descriptors_discover_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_descriptors_discover_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_descriptors_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_descriptors_discover
</UL>

<P><STRONG><a name="[29e]"></a>ble_gattc_descriptors_discover_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_descriptors_discover_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_descriptors_discover_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_descriptors_discover
</UL>

<P><STRONG><a name="[227]"></a>ble_gattc_evt_attr_info_disc_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_attr_info_disc_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_attr_info_disc_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[8d]"></a>ble_gattc_evt_attr_info_disc_rsp_t_enc</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_attr_info_disc_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_attr_info_disc_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_attr_info_disc_rsp_enc)
</UL>
<P><STRONG><a name="[21d]"></a>ble_gattc_evt_char_disc_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_char_disc_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_char_disc_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[90]"></a>ble_gattc_evt_char_disc_rsp_t_enc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_disc_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_char_disc_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_char_disc_rsp_enc)
</UL>
<P><STRONG><a name="[21f]"></a>ble_gattc_evt_char_val_by_uuid_read_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_char_val_by_uuid_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_char_val_by_uuid_read_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[92]"></a>ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_char_val_by_uuid_read_rsp_enc)
</UL>
<P><STRONG><a name="[226]"></a>ble_gattc_evt_char_vals_read_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_char_vals_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_char_vals_read_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[93]"></a>ble_gattc_evt_char_vals_read_rsp_t_enc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_char_vals_read_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_char_vals_read_rsp_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_char_vals_read_rsp_enc)
</UL>
<P><STRONG><a name="[21e]"></a>ble_gattc_evt_desc_disc_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_desc_disc_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_desc_disc_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[94]"></a>ble_gattc_evt_desc_disc_rsp_t_enc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_desc_disc_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_desc_disc_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_desc_disc_rsp_enc)
</UL>
<P><STRONG><a name="[228]"></a>ble_gattc_evt_exchange_mtu_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_exchange_mtu_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_exchange_mtu_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[96]"></a>ble_gattc_evt_exchange_mtu_rsp_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_exchange_mtu_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_evt_exchange_mtu_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_exchange_mtu_rsp_enc)
</UL>
<P><STRONG><a name="[221]"></a>ble_gattc_evt_hvx_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_hvx_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_hvx_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[97]"></a>ble_gattc_evt_hvx_t_enc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_hvx_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_hvx_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_hvx_enc)
</UL>
<P><STRONG><a name="[220]"></a>ble_gattc_evt_prim_srvc_disc_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_prim_srvc_disc_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_prim_srvc_disc_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[98]"></a>ble_gattc_evt_prim_srvc_disc_rsp_t_enc</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_prim_srvc_disc_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_prim_srvc_disc_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_prim_srvc_disc_rsp_enc)
</UL>
<P><STRONG><a name="[222]"></a>ble_gattc_evt_read_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_read_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[9a]"></a>ble_gattc_evt_read_rsp_t_enc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_read_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_read_rsp_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_read_rsp_enc)
</UL>
<P><STRONG><a name="[225]"></a>ble_gattc_evt_rel_disc_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_rel_disc_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_rel_disc_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[9b]"></a>ble_gattc_evt_rel_disc_rsp_t_enc</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_rel_disc_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_rel_disc_rsp_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_rel_disc_rsp_enc)
</UL>
<P><STRONG><a name="[223]"></a>ble_gattc_evt_timeout_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_timeout_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_timeout_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[9d]"></a>ble_gattc_evt_timeout_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_timeout_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_evt_timeout_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_timeout_enc)
</UL>
<P><STRONG><a name="[229]"></a>ble_gattc_evt_write_cmd_tx_complete_enc</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_write_cmd_tx_complete_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_write_cmd_tx_complete_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[224]"></a>ble_gattc_evt_write_rsp_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_gattc_evt_conn.o(i.ble_gattc_evt_write_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gattc_evt_write_rsp_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[9e]"></a>ble_gattc_evt_write_rsp_t_enc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_evt_write_rsp_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_evt_write_rsp_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_evt_conn.o(i.ble_gattc_evt_write_rsp_enc)
</UL>
<P><STRONG><a name="[2a0]"></a>ble_gattc_exchange_mtu_request_req_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gattc_conn.o(i.ble_gattc_exchange_mtu_request_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_exchange_mtu_request_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_exchange_mtu_request
</UL>

<P><STRONG><a name="[2a1]"></a>ble_gattc_exchange_mtu_request_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_exchange_mtu_request_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_exchange_mtu_request_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_exchange_mtu_request
</UL>

<P><STRONG><a name="[8a]"></a>ble_gattc_handle_range_t_dec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_handle_range_t_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ble_gattc_conn.o(i.ble_gattc_attr_info_discover_req_dec)
<LI> ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_req_dec)
<LI> ble_gattc_conn.o(i.ble_gattc_characteristics_discover_req_dec)
<LI> ble_gattc_conn.o(i.ble_gattc_descriptors_discover_req_dec)
<LI> ble_gattc_conn.o(i.ble_gattc_relationships_discover_req_dec)
</UL>
<P><STRONG><a name="[9f]"></a>ble_gattc_handle_range_t_enc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_handle_range_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_handle_range_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc)
</UL>
<P><STRONG><a name="[2a2]"></a>ble_gattc_hv_confirm_req_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gattc_conn.o(i.ble_gattc_hv_confirm_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_hv_confirm_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_hv_confirm
</UL>

<P><STRONG><a name="[2a3]"></a>ble_gattc_hv_confirm_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_hv_confirm_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_hv_confirm_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_hv_confirm
</UL>

<P><STRONG><a name="[9c]"></a>ble_gattc_include_t_enc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_include_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_include_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_rel_disc_rsp_t_enc)
</UL>
<P><STRONG><a name="[2a4]"></a>ble_gattc_primary_services_discover_req_dec</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_primary_services_discover_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_primary_services_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_primary_services_discover
</UL>

<P><STRONG><a name="[2a5]"></a>ble_gattc_primary_services_discover_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_primary_services_discover_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_primary_services_discover_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_primary_services_discover
</UL>

<P><STRONG><a name="[2a6]"></a>ble_gattc_read_req_dec</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_read_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gattc_read_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_read
</UL>

<P><STRONG><a name="[2a7]"></a>ble_gattc_read_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_read_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_read_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_read
</UL>

<P><STRONG><a name="[2a8]"></a>ble_gattc_relationships_discover_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_relationships_discover_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_relationships_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_relationships_discover
</UL>

<P><STRONG><a name="[2a9]"></a>ble_gattc_relationships_discover_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_relationships_discover_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_relationships_discover_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_relationships_discover
</UL>

<P><STRONG><a name="[99]"></a>ble_gattc_service_t_enc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gattc_service_t_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_evt_prim_srvc_disc_rsp_t_enc)
<LI> ble_gattc_struct_serialization.o(i.ble_gattc_include_t_enc)
</UL>
<P><STRONG><a name="[a0]"></a>ble_gattc_write_params_t_dec</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_gattc_struct_serialization.o(i.ble_gattc_write_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_gattc_write_params_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_conn.o(i.ble_gattc_write_req_dec)
</UL>
<P><STRONG><a name="[2aa]"></a>ble_gattc_write_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gattc_conn.o(i.ble_gattc_write_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gattc_write_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_write
</UL>

<P><STRONG><a name="[2ab]"></a>ble_gattc_write_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gattc_conn.o(i.ble_gattc_write_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gattc_write_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gattc_write
</UL>

<P><STRONG><a name="[2ac]"></a>ble_gatts_attr_get_req_dec</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_attr_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_attr_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_attr_get
</UL>

<P><STRONG><a name="[2ad]"></a>ble_gatts_attr_get_rsp_enc</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_attr_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_attr_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_attr_get
</UL>

<P><STRONG><a name="[a2]"></a>ble_gatts_attr_md_t_dec</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_attr_md_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
</UL>
<P><STRONG><a name="[a1]"></a>ble_gatts_attr_md_t_enc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_attr_md_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_attr_md_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_attr_get_rsp_enc)
</UL>
<P><STRONG><a name="[a7]"></a>ble_gatts_attr_t_dec</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_gatts_attr_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gatts_conn.o(i.ble_gatts_characteristic_add_req_dec)
<LI> ble_gatts_conn.o(i.ble_gatts_descriptor_add_req_dec)
</UL>
<P><STRONG><a name="[b1]"></a>ble_gatts_authorize_params_t_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_authorize_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_gatts_authorize_params_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_rw_authorize_reply_params_t_dec)
</UL>
<P><STRONG><a name="[45]"></a>ble_gatts_cfg_attr_tab_size_t_dec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_cfg_attr_tab_size_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_cfg_attr_tab_size_t_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[44]"></a>ble_gatts_cfg_service_changed_t_dec</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_cfg_service_changed_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_gatts_cfg_service_changed_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[a8]"></a>ble_gatts_char_handles_t_enc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_char_handles_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_char_handles_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_characteristic_add_rsp_enc)
</UL>
<P><STRONG><a name="[a6]"></a>ble_gatts_char_md_t_dec</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_gatts_char_md_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_characteristic_add_req_dec)
</UL>
<P><STRONG><a name="[a5]"></a>ble_gatts_char_pf_t_dec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_char_pf_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_char_pf_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_char_md_t_dec)
</UL>
<P><STRONG><a name="[2b0]"></a>ble_gatts_characteristic_add_req_dec</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_characteristic_add_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_characteristic_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_characteristic_add
</UL>

<P><STRONG><a name="[2b1]"></a>ble_gatts_characteristic_add_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_characteristic_add_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_characteristic_add_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_characteristic_add
</UL>

<P><STRONG><a name="[3e]"></a>ble_gatts_conn_cfg_t_dec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_conn_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_conn_cfg_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[2b2]"></a>ble_gatts_descriptor_add_req_dec</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_descriptor_add_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_descriptor_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_descriptor_add
</UL>

<P><STRONG><a name="[2b3]"></a>ble_gatts_descriptor_add_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_descriptor_add_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_descriptor_add_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_descriptor_add
</UL>

<P><STRONG><a name="[230]"></a>ble_gatts_evt_exchange_mtu_request_enc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_exchange_mtu_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gatts_evt_exchange_mtu_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[a9]"></a>ble_gatts_evt_exchange_mtu_request_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_exchange_mtu_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_evt_exchange_mtu_request_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_exchange_mtu_request_enc)
</UL>
<P><STRONG><a name="[22a]"></a>ble_gatts_evt_hvc_enc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_hvc_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gatts_evt_hvc_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[aa]"></a>ble_gatts_evt_hvc_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_hvc_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_evt_hvc_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_hvc_enc)
</UL>
<P><STRONG><a name="[231]"></a>ble_gatts_evt_hvn_tx_complete_enc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_hvn_tx_complete_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_evt_hvn_tx_complete_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[ac]"></a>ble_gatts_evt_read_t_enc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_read_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_evt_read_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc)
</UL>
<P><STRONG><a name="[22e]"></a>ble_gatts_evt_rw_authorize_request_enc</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_rw_authorize_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_gatts_evt_rw_authorize_request_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_user_mem_context_find
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[ab]"></a>ble_gatts_evt_rw_authorize_request_t_enc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_evt_rw_authorize_request_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_rw_authorize_request_enc)
</UL>
<P><STRONG><a name="[22c]"></a>ble_gatts_evt_sc_confirm_enc</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_sc_confirm_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_evt_sc_confirm_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[22f]"></a>ble_gatts_evt_sys_attr_missing_enc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_sys_attr_missing_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gatts_evt_sys_attr_missing_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[ae]"></a>ble_gatts_evt_sys_attr_missing_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_sys_attr_missing_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_evt_sys_attr_missing_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_sys_attr_missing_enc)
</UL>
<P><STRONG><a name="[22b]"></a>ble_gatts_evt_timeout_enc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_timeout_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_gatts_evt_timeout_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[af]"></a>ble_gatts_evt_timeout_t_enc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_timeout_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_evt_timeout_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_timeout_enc)
</UL>
<P><STRONG><a name="[22d]"></a>ble_gatts_evt_write_enc</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, ble_gatts_evt_conn.o(i.ble_gatts_evt_write_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_gatts_evt_write_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_user_mem_context_find
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[ad]"></a>ble_gatts_evt_write_t_enc</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_evt_write_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_evt_write_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gatts_evt_conn.o(i.ble_gatts_evt_write_enc)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_evt_rw_authorize_request_t_enc)
</UL>
<P><STRONG><a name="[2b6]"></a>ble_gatts_exchange_mtu_reply_req_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_gatts_conn.o(i.ble_gatts_exchange_mtu_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_exchange_mtu_reply_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_exchange_mtu_reply
</UL>

<P><STRONG><a name="[2b7]"></a>ble_gatts_exchange_mtu_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gatts_conn.o(i.ble_gatts_exchange_mtu_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_exchange_mtu_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_exchange_mtu_reply
</UL>

<P><STRONG><a name="[b0]"></a>ble_gatts_hvx_params_t_dec</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_hvx_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_hvx_params_t_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_hvx_req_dec)
</UL>
<P><STRONG><a name="[2b8]"></a>ble_gatts_hvx_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gatts_conn.o(i.ble_gatts_hvx_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gatts_hvx_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_hvx
</UL>

<P><STRONG><a name="[2b9]"></a>ble_gatts_hvx_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_hvx_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_hvx_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_hvx
</UL>

<P><STRONG><a name="[2ba]"></a>ble_gatts_include_add_req_dec</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_include_add_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_include_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_include_add
</UL>

<P><STRONG><a name="[2bb]"></a>ble_gatts_include_add_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_include_add_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_include_add_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_include_add
</UL>

<P><STRONG><a name="[2bc]"></a>ble_gatts_initial_user_handle_get_req_dec</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_gatts_conn.o(i.ble_gatts_initial_user_handle_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_gatts_initial_user_handle_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_initial_user_handle_get
</UL>

<P><STRONG><a name="[2bd]"></a>ble_gatts_initial_user_handle_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_initial_user_handle_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_initial_user_handle_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_initial_user_handle_get
</UL>

<P><STRONG><a name="[b2]"></a>ble_gatts_rw_authorize_reply_params_t_dec</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_rw_authorize_reply_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_gatts_rw_authorize_reply_params_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_rw_authorize_reply_req_dec)
</UL>
<P><STRONG><a name="[2be]"></a>ble_gatts_rw_authorize_reply_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_gatts_conn.o(i.ble_gatts_rw_authorize_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gatts_rw_authorize_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_rw_authorize_reply
</UL>

<P><STRONG><a name="[2bf]"></a>ble_gatts_rw_authorize_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gatts_conn.o(i.ble_gatts_rw_authorize_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_rw_authorize_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_rw_authorize_reply
</UL>

<P><STRONG><a name="[2c0]"></a>ble_gatts_service_add_req_dec</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_service_add_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_service_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_service_add
</UL>

<P><STRONG><a name="[2c1]"></a>ble_gatts_service_add_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_service_add_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_service_add_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_service_add
</UL>

<P><STRONG><a name="[2c2]"></a>ble_gatts_service_changed_req_dec</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_gatts_conn.o(i.ble_gatts_service_changed_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_gatts_service_changed_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_service_changed
</UL>

<P><STRONG><a name="[2c3]"></a>ble_gatts_service_changed_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gatts_conn.o(i.ble_gatts_service_changed_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_service_changed_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_service_changed
</UL>

<P><STRONG><a name="[2c4]"></a>ble_gatts_sys_attr_get_req_dec</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_sys_attr_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_sys_attr_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_sys_attr_get
</UL>

<P><STRONG><a name="[2c5]"></a>ble_gatts_sys_attr_get_rsp_enc</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_sys_attr_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_gatts_sys_attr_get_rsp_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_sys_attr_get
</UL>

<P><STRONG><a name="[2c6]"></a>ble_gatts_sys_attr_set_req_dec</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_sys_attr_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ble_gatts_sys_attr_set_req_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_sys_attr_set
</UL>

<P><STRONG><a name="[2c7]"></a>ble_gatts_sys_attr_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_gatts_conn.o(i.ble_gatts_sys_attr_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_gatts_sys_attr_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_sys_attr_set
</UL>

<P><STRONG><a name="[2c8]"></a>ble_gatts_value_get_req_dec</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ble_gatts_conn.o(i.ble_gatts_value_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_gatts_value_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_value_get
</UL>

<P><STRONG><a name="[2c9]"></a>ble_gatts_value_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_value_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_value_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_value_get
</UL>

<P><STRONG><a name="[2ca]"></a>ble_gatts_value_set_req_dec</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ble_gatts_conn.o(i.ble_gatts_value_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_gatts_value_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_value_set
</UL>

<P><STRONG><a name="[2cb]"></a>ble_gatts_value_set_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_gatts_conn.o(i.ble_gatts_value_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_gatts_value_set_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gatts_value_set
</UL>

<P><STRONG><a name="[b4]"></a>ble_gatts_value_t_dec</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_value_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_gatts_value_t_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gatts_conn.o(i.ble_gatts_value_set_req_dec)
</UL>
<P><STRONG><a name="[b3]"></a>ble_gatts_value_t_enc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_gatts_struct_serialization.o(i.ble_gatts_value_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_gatts_value_t_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_gatts_conn.o(i.ble_gatts_value_get_rsp_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_value_set_rsp_enc)
</UL>
<P><STRONG><a name="[2cc]"></a>ble_l2cap_ch_flow_control_req_dec</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_flow_control_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_l2cap_ch_flow_control_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_flow_control
</UL>

<P><STRONG><a name="[2cd]"></a>ble_l2cap_ch_flow_control_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_flow_control_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_l2cap_ch_flow_control_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_flow_control
</UL>

<P><STRONG><a name="[2ce]"></a>ble_l2cap_ch_release_req_dec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_release_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_ch_release_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_release
</UL>

<P><STRONG><a name="[2cf]"></a>ble_l2cap_ch_release_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_release_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_l2cap_ch_release_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_release
</UL>

<P><STRONG><a name="[2d0]"></a>ble_l2cap_ch_rx_params_t_dec</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_rx_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_ch_rx_params_t_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_params_t_dec
</UL>

<P><STRONG><a name="[2d1]"></a>ble_l2cap_ch_rx_req_dec</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_rx_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_l2cap_ch_rx_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_rx
</UL>

<P><STRONG><a name="[2d3]"></a>ble_l2cap_ch_rx_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_rx_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_l2cap_ch_rx_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_rx
</UL>

<P><STRONG><a name="[b5]"></a>ble_l2cap_ch_setup_params_t_dec</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_setup_params_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_l2cap_ch_setup_params_t_dec &rArr; ble_l2cap_ch_rx_params_t_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_params_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_l2cap_conn.o(i.ble_l2cap_ch_setup_req_dec)
</UL>
<P><STRONG><a name="[2d4]"></a>ble_l2cap_ch_setup_req_dec</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_setup_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_l2cap_ch_setup_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_setup
</UL>

<P><STRONG><a name="[2d5]"></a>ble_l2cap_ch_setup_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_setup_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_l2cap_ch_setup_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_setup
</UL>

<P><STRONG><a name="[b6]"></a>ble_l2cap_ch_tx_params_t_enc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ble_l2cap_struct_serialization.o(i.ble_l2cap_ch_tx_params_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_ch_tx_params_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_enc)
<LI> ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_request_enc)
</UL>
<P><STRONG><a name="[2d6]"></a>ble_l2cap_ch_tx_req_dec</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_tx_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ble_l2cap_ch_tx_req_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_tx
</UL>

<P><STRONG><a name="[2d7]"></a>ble_l2cap_ch_tx_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_l2cap_conn.o(i.ble_l2cap_ch_tx_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_l2cap_ch_tx_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_l2cap_ch_tx
</UL>

<P><STRONG><a name="[40]"></a>ble_l2cap_conn_cfg_t_dec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_l2cap_struct_serialization.o(i.ble_l2cap_conn_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_l2cap_conn_cfg_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_cfg_set_req_dec)
</UL>
<P><STRONG><a name="[237]"></a>ble_l2cap_evt_ch_credit_enc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_credit_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_l2cap_evt_ch_credit_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[235]"></a>ble_l2cap_evt_ch_released_enc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_released_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_l2cap_evt_ch_released_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[238]"></a>ble_l2cap_evt_ch_rx_enc</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_rx_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_l2cap_evt_ch_rx_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[236]"></a>ble_l2cap_evt_ch_sdu_buf_released_enc</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_sdu_buf_released_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_l2cap_evt_ch_sdu_buf_released_enc &rArr; conn_ble_l2cap_sdu_pool_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[234]"></a>ble_l2cap_evt_ch_setup_enc</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_l2cap_evt_ch_setup_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[233]"></a>ble_l2cap_evt_ch_setup_refused_enc</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_refused_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_l2cap_evt_ch_setup_refused_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[232]"></a>ble_l2cap_evt_ch_setup_request_enc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_setup_request_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_l2cap_evt_ch_setup_request_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[239]"></a>ble_l2cap_evt_ch_tx_enc</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ble_l2cap_evt_conn.o(i.ble_l2cap_evt_ch_tx_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_l2cap_evt_ch_tx_enc &rArr; conn_ble_l2cap_sdu_pool_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
</UL>

<P><STRONG><a name="[2da]"></a>ble_opt_get_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_conn.o(i.ble_opt_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_opt_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_opt_get
</UL>

<P><STRONG><a name="[2db]"></a>ble_opt_get_rsp_enc</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, ble_conn.o(i.ble_opt_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_opt_get_rsp_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_opt_get
</UL>

<P><STRONG><a name="[2dd]"></a>ble_opt_id_pre_dec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn.o(i.ble_opt_id_pre_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_opt_id_pre_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_opt_set
</UL>

<P><STRONG><a name="[2de]"></a>ble_opt_set_req_dec</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ble_conn.o(i.ble_opt_set_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_opt_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_dec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_opt_set
</UL>

<P><STRONG><a name="[2df]"></a>ble_opt_set_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn.o(i.ble_opt_set_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_opt_set_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_opt_set
</UL>

<P><STRONG><a name="[46]"></a>ble_pa_lna_cfg_t_dec</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_struct_serialization.o(i.ble_pa_lna_cfg_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_pa_lna_cfg_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_dec)
</UL>
<P><STRONG><a name="[47]"></a>ble_pa_lna_cfg_t_enc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_struct_serialization.o(i.ble_pa_lna_cfg_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_pa_lna_cfg_t_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_struct_serialization.o(i.ble_common_opt_pa_lna_t_enc)
</UL>
<P><STRONG><a name="[c6]"></a>ble_user_mem_block_t_dec</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_struct_serialization.o(i.ble_user_mem_block_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_user_mem_block_t_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_user_mem_reply_req_dec)
</UL>
<P><STRONG><a name="[2e0]"></a>ble_user_mem_reply_req_dec</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ble_conn.o(i.ble_user_mem_reply_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_user_mem_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_user_mem_reply
</UL>

<P><STRONG><a name="[2e1]"></a>ble_user_mem_reply_rsp_enc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn.o(i.ble_user_mem_reply_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_user_mem_reply_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_user_mem_reply
</UL>

<P><STRONG><a name="[c7]"></a>ble_uuid128_t_dec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_struct_serialization.o(i.ble_uuid128_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_uuid128_t_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_uuid_vs_add_req_dec)
</UL>
<P><STRONG><a name="[88]"></a>ble_uuid128_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_struct_serialization.o(i.ble_uuid128_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_uuid128_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gattc_struct_serialization.o(i.ble_gattc_attr_info128_t_enc)
</UL>
<P><STRONG><a name="[2e2]"></a>ble_uuid_decode_req_dec</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ble_conn.o(i.ble_uuid_decode_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_uuid_decode_req_dec &rArr; len8data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len8data_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_decode
</UL>

<P><STRONG><a name="[2e4]"></a>ble_uuid_decode_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_conn.o(i.ble_uuid_decode_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_uuid_decode_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_decode
</UL>

<P><STRONG><a name="[2e5]"></a>ble_uuid_encode_req_dec</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, ble_conn.o(i.ble_uuid_encode_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_uuid_encode_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_encode
</UL>

<P><STRONG><a name="[2e6]"></a>ble_uuid_encode_rsp_enc</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, ble_conn.o(i.ble_uuid_encode_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_uuid_encode_rsp_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_encode
</UL>

<P><STRONG><a name="[8c]"></a>ble_uuid_t_dec</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_struct_serialization.o(i.ble_uuid_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_uuid_t_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ble_gattc_conn.o(i.ble_gattc_char_value_by_uuid_read_req_dec)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_attr_t_dec)
<LI> ble_conn.o(i.ble_uuid_encode_req_dec)
<LI> ble_gattc_conn.o(i.ble_gattc_primary_services_discover_req_dec)
<LI> ble_gatts_conn.o(i.ble_gatts_service_add_req_dec)
</UL>
<P><STRONG><a name="[89]"></a>ble_uuid_t_enc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ble_struct_serialization.o(i.ble_uuid_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_uuid_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 8]<UL><LI> ble_gatts_conn.o(i.ble_gatts_attr_get_rsp_enc)
<LI> ble_gattc_struct_serialization.o(i.ble_gattc_desc_t_enc)
<LI> ble_conn.o(i.ble_uuid_decode_rsp_enc)
<LI> ble_gattc_struct_serialization.o(i.ble_gattc_service_t_enc)
<LI> ble_gattc_struct_serialization.o(i.ble_gattc_attr_info16_t_enc)
<LI> ble_gattc_struct_serialization.o(i.ble_gattc_char_t_enc)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_evt_read_t_enc)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_evt_write_t_enc)
</UL>
<P><STRONG><a name="[2e7]"></a>ble_uuid_vs_add_req_dec</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_conn.o(i.ble_uuid_vs_add_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ble_uuid_vs_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_vs_add
</UL>

<P><STRONG><a name="[2e8]"></a>ble_uuid_vs_add_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_conn.o(i.ble_uuid_vs_add_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_uuid_vs_add_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_uuid_vs_add
</UL>

<P><STRONG><a name="[2e9]"></a>ble_version_get_req_dec</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ble_conn.o(i.ble_version_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_version_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_version_get
</UL>

<P><STRONG><a name="[2ea]"></a>ble_version_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ble_conn.o(i.ble_version_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_version_get_rsp_enc &rArr; field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_version_get
</UL>

<P><STRONG><a name="[c8]"></a>ble_version_t_enc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_struct_serialization.o(i.ble_version_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_version_t_enc &rArr; uint16_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn.o(i.ble_version_get_rsp_enc)
</UL>
<P><STRONG><a name="[2eb]"></a>bsp_board_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_board_init &rArr; bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ee]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[2f0]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[246]"></a>buf_dec</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ble_serialization.o(i.buf_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_dec
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_params_t_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_req_dec
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len8data_dec
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_passkey_t_dec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_cfg_device_name_t_dec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_params_t_dec
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
</UL>

<P><STRONG><a name="[274]"></a>buf_enc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_serialization.o(i.buf_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_rx_enc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_passkey_t_enc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_rsp_enc
</UL>

<P><STRONG><a name="[1f8]"></a>cond_field_dec</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cond_field_serialization.o(i.cond_field_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_whitelist_set_req_dec
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_req_dec
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_info_reply_req_dec
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_start_req_dec
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_req_dec
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_set_req_dec
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_req_dec
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_set_req_dec
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_req_dec
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phy_update_req_dec
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_set_req_dec
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_req_dec
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_reply_req_dec
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encrypt_req_dec
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set_req_dec
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_req_dec
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_identities_set_req_dec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_req_dec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_req_dec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_req_dec
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_req_dec
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_authenticate_req_dec
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_req_dec
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_req_dec
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_set_req_dec
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_req_dec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_block_t_dec
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_local_conn_latency_t_dec
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_req_dec
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_req_dec
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_req_dec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_req_dec
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_reply_req_dec
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_req_dec
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_req_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_req_dec
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_keys_t_dec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_params_t_dec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_md_t_dec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_t_dec
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_req_dec
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_req_dec
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_req_dec
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_req_dec
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_req_dec
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_req_dec
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_req_dec
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_req_dec
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_req_dec
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_req_dec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_req_dec
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_req_dec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_relationships_discover_req_dec
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_primary_services_discover_req_dec
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_descriptors_discover_req_dec
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_characteristics_discover_req_dec
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_value_by_uuid_read_req_dec
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info_discover_req_dec
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_req_dec
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_req_dec
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_req_dec
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_req_dec
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_req_dec
</UL>

<P><STRONG><a name="[23c]"></a>cond_field_enc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cond_field_serialization.o(i.cond_field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_enc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_rsp_enc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_rsp_enc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_rsp_enc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_rsp_enc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_rsp_enc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_rsp_enc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_rsp_enc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_rsp_enc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_rsp_enc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_rsp_enc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_lesc_dhkey_request_enc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_release_enc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_local_conn_latency_t_enc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_rsp_enc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_rsp_enc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_keys_t_enc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_rsp_enc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_rsp_enc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_rsp_enc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_rsp_enc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_rsp_enc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_rsp_enc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_rsp_enc
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_rsp_enc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_rsp_enc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_rsp_enc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_rsp_enc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_rsp_enc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_rsp_enc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_rsp_enc
</UL>

<P><STRONG><a name="[1fe]"></a>conn_ble_gap_ble_data_buf_alloc</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_ble_data_buf_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_dec
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_start
</UL>

<P><STRONG><a name="[200]"></a>conn_ble_gap_ble_data_buf_free</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_ble_data_buf_free))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_scan_data_unset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_enc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_adv_set_configure
</UL>

<P><STRONG><a name="[305]"></a>conn_ble_gap_scan_data_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_scan_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_start
</UL>

<P><STRONG><a name="[269]"></a>conn_ble_gap_scan_data_unset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_scan_data_unset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_gap_scan_data_unset
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_ble_data_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_enc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_stop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_scan_start
</UL>

<P><STRONG><a name="[306]"></a>conn_ble_gap_sec_context_create</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_sec_context_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_gap_sec_context_create
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_params_reply
</UL>

<P><STRONG><a name="[26b]"></a>conn_ble_gap_sec_context_destroy</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_sec_context_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_gap_sec_context_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_enc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_enc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_gap_sec_params_reply
</UL>

<P><STRONG><a name="[26a]"></a>conn_ble_gap_sec_context_find</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_sec_context_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_ble_gap_sec_context_find
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_enc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_enc
</UL>

<P><STRONG><a name="[3d2]"></a>conn_ble_gap_sec_keys_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, conn_ble_gap_sec_keys.o(i.conn_ble_gap_sec_keys_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_reset
</UL>

<P><STRONG><a name="[2d2]"></a>conn_ble_l2cap_sdu_pool_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, conn_ble_l2cap_sdu_pool.o(i.conn_ble_l2cap_sdu_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = conn_ble_l2cap_sdu_pool_alloc &rArr; nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_req_dec
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_req_dec
</UL>

<P><STRONG><a name="[2d8]"></a>conn_ble_l2cap_sdu_pool_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conn_ble_l2cap_sdu_pool.o(i.conn_ble_l2cap_sdu_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = conn_ble_l2cap_sdu_pool_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_tx_enc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_sdu_buf_released_enc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_rx_enc
</UL>

<P><STRONG><a name="[300]"></a>conn_ble_l2cap_sdu_pool_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conn_ble_l2cap_sdu_pool.o(i.conn_ble_l2cap_sdu_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_l2cap_sdu_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_reset
</UL>

<P><STRONG><a name="[307]"></a>conn_ble_user_mem_context_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, conn_ble_user_mem.o(i.conn_ble_user_mem_context_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_user_mem_context_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_user_mem_reply
</UL>

<P><STRONG><a name="[23d]"></a>conn_ble_user_mem_context_destroy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, conn_ble_user_mem.o(i.conn_ble_user_mem_context_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_ble_user_mem_context_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_release_enc
</UL>

<P><STRONG><a name="[2b5]"></a>conn_ble_user_mem_context_find</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, conn_ble_user_mem.o(i.conn_ble_user_mem_context_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_ble_user_mem_context_find
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_enc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_enc
</UL>

<P><STRONG><a name="[3d3]"></a>conn_ble_user_mem_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, conn_ble_user_mem.o(i.conn_ble_user_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_reset
</UL>

<P><STRONG><a name="[110]"></a>conn_mw_ble_cfg_set</STRONG> (Thumb, 70 bytes, Stack size 296 bytes, conn_mw_ble.o(i.conn_mw_ble_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = conn_mw_ble_cfg_set &rArr; ble_cfg_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_rsp_enc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>conn_mw_ble_enable</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, conn_mw_ble.o(i.conn_mw_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_mw_ble_enable &rArr; ble_enable_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_enable_rsp_enc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_enable_req_dec
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>conn_mw_ble_gap_addr_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = conn_mw_ble_gap_addr_get &rArr; ble_gap_addr_get_rsp_enc &rArr; ble_gap_addr_t_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_rsp_enc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>conn_mw_ble_gap_addr_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = conn_mw_ble_gap_addr_set &rArr; ble_gap_addr_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_set_rsp_enc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>conn_mw_ble_gap_adv_set_configure</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_set_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = conn_mw_ble_gap_adv_set_configure &rArr; ble_gap_adv_set_configure_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_rsp_enc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_req_dec
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_ble_data_buf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>conn_mw_ble_gap_adv_start</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gap_adv_start &rArr; ble_gap_adv_start_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start_rsp_enc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>conn_mw_ble_gap_adv_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_mw_ble_gap_adv_stop &rArr; ble_gap_adv_stop_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_rsp_enc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>conn_mw_ble_gap_appearance_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_appearance_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conn_mw_ble_gap_appearance_get &rArr; ble_gap_appearance_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_rsp_enc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>conn_mw_ble_gap_appearance_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_appearance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_mw_ble_gap_appearance_set &rArr; ble_gap_appearance_set_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_set_rsp_enc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>conn_mw_ble_gap_auth_key_reply</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_auth_key_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = conn_mw_ble_gap_auth_key_reply &rArr; ble_gap_auth_key_reply_req_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_rsp_enc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>conn_mw_ble_gap_authenticate</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = conn_mw_ble_gap_authenticate &rArr; ble_gap_authenticate_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_authenticate_rsp_enc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_authenticate_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>conn_mw_ble_gap_conn_param_update</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_conn_param_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = conn_mw_ble_gap_conn_param_update &rArr; ble_gap_conn_param_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_rsp_enc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>conn_mw_ble_gap_conn_sec_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_conn_sec_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gap_conn_sec_get &rArr; ble_gap_conn_sec_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_rsp_enc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>conn_mw_ble_gap_connect</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = conn_mw_ble_gap_connect &rArr; ble_gap_connect_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_rsp_enc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>conn_mw_ble_gap_connect_cancel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_connect_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_mw_ble_gap_connect_cancel &rArr; ble_gap_connect_cancel_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_cancel_rsp_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>conn_mw_ble_gap_data_length_update</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_mw_ble_gap_data_length_update &rArr; ble_gap_data_length_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_rsp_enc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>conn_mw_ble_gap_device_identities_set</STRONG> (Thumb, 106 bytes, Stack size 416 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_identities_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = conn_mw_ble_gap_device_identities_set &rArr; ble_gap_device_identities_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_identities_set_rsp_enc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_identities_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>conn_mw_ble_gap_device_name_get</STRONG> (Thumb, 78 bytes, Stack size 288 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = conn_mw_ble_gap_device_name_get &rArr; ble_gap_device_name_get_rsp_enc &rArr; len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_rsp_enc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>conn_mw_ble_gap_device_name_set</STRONG> (Thumb, 70 bytes, Stack size 280 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_device_name_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = conn_mw_ble_gap_device_name_set &rArr; ble_gap_device_name_set_req_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set_rsp_enc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>conn_mw_ble_gap_disconnect</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gap_disconnect &rArr; ble_gap_disconnect_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disconnect_rsp_enc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disconnect_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>conn_mw_ble_gap_encrypt</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = conn_mw_ble_gap_encrypt &rArr; ble_gap_encrypt_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encrypt_rsp_enc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encrypt_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>conn_mw_ble_gap_keypress_notify</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_keypress_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gap_keypress_notify &rArr; ble_gap_keypress_notify_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_keypress_notify_rsp_enc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_keypress_notify_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>conn_mw_ble_gap_lesc_dhkey_reply</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_dhkey_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_mw_ble_gap_lesc_dhkey_reply &rArr; ble_gap_lesc_dhkey_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_reply_rsp_enc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_reply_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>conn_mw_ble_gap_lesc_oob_data_get</STRONG> (Thumb, 66 bytes, Stack size 136 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_oob_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = conn_mw_ble_gap_lesc_oob_data_get &rArr; ble_gap_lesc_oob_data_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_rsp_enc
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>conn_mw_ble_gap_lesc_oob_data_set</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_lesc_oob_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = conn_mw_ble_gap_lesc_oob_data_set &rArr; ble_gap_lesc_oob_data_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_set_rsp_enc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>conn_mw_ble_gap_phy_update</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_phy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gap_phy_update &rArr; ble_gap_phy_update_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phy_update_rsp_enc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phy_update_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>conn_mw_ble_gap_ppcp_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_ppcp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conn_mw_ble_gap_ppcp_get &rArr; ble_gap_ppcp_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_rsp_enc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>conn_mw_ble_gap_ppcp_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_ppcp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = conn_mw_ble_gap_ppcp_set &rArr; ble_gap_ppcp_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_set_rsp_enc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>conn_mw_ble_gap_privacy_get</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_privacy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_mw_ble_gap_privacy_get &rArr; ble_gap_privacy_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_rsp_enc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>conn_mw_ble_gap_privacy_set</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_privacy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gap_privacy_set &rArr; ble_gap_privacy_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_set_rsp_enc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>conn_mw_ble_gap_qos_channel_survey_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_qos_channel_survey_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_mw_ble_gap_qos_channel_survey_start &rArr; ble_gap_qos_channel_survey_start_req_dec &rArr; uint32_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_start_rsp_enc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_start_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>conn_mw_ble_gap_qos_channel_survey_stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_qos_channel_survey_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_mw_ble_gap_qos_channel_survey_stop &rArr; ble_gap_qos_channel_survey_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_stop_rsp_enc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_stop_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>conn_mw_ble_gap_rssi_get</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_ble_gap_rssi_get &rArr; ble_gap_rssi_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_rsp_enc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>conn_mw_ble_gap_rssi_start</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_mw_ble_gap_rssi_start &rArr; ble_gap_rssi_start_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_start_rsp_enc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_start_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>conn_mw_ble_gap_rssi_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_rssi_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_mw_ble_gap_rssi_stop &rArr; ble_gap_rssi_stop_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_stop_rsp_enc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_stop_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>conn_mw_ble_gap_scan_start</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_mw_ble_gap_scan_start &rArr; ble_gap_scan_start_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_start_rsp_enc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_start_req_dec
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_scan_data_unset
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_scan_data_set
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_ble_data_buf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>conn_mw_ble_gap_scan_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_scan_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_mw_ble_gap_scan_stop &rArr; ble_gap_scan_stop_rsp_enc &rArr; ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_stop_rsp_enc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_scan_data_unset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>conn_mw_ble_gap_sec_info_reply</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_sec_info_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = conn_mw_ble_gap_sec_info_reply &rArr; ble_gap_sec_info_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_info_reply_rsp_enc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_info_reply_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>conn_mw_ble_gap_sec_params_reply</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_sec_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = conn_mw_ble_gap_sec_params_reply &rArr; ble_gap_sec_params_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_rsp_enc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_req_dec
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_destroy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_context_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>conn_mw_ble_gap_tx_power_set</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_tx_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_mw_ble_gap_tx_power_set &rArr; ble_gap_tx_power_set_req_dec &rArr; uint8_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_power_set_rsp_enc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_power_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>conn_mw_ble_gap_whitelist_set</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, conn_mw_ble_gap.o(i.conn_mw_ble_gap_whitelist_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = conn_mw_ble_gap_whitelist_set &rArr; ble_gap_whitelist_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_whitelist_set_rsp_enc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_whitelist_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>conn_mw_ble_gattc_attr_info_discover</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_attr_info_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gattc_attr_info_discover &rArr; ble_gattc_attr_info_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info_discover_rsp_enc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info_discover_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>conn_mw_ble_gattc_char_value_by_uuid_read</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_char_value_by_uuid_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = conn_mw_ble_gattc_char_value_by_uuid_read &rArr; ble_gattc_char_value_by_uuid_read_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_value_by_uuid_read_rsp_enc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_value_by_uuid_read_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>conn_mw_ble_gattc_char_values_read</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_char_values_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = conn_mw_ble_gattc_char_values_read &rArr; ble_gattc_char_values_read_req_dec &rArr; count16_cond_data16_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_values_read_rsp_enc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_values_read_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>conn_mw_ble_gattc_characteristics_discover</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_characteristics_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gattc_characteristics_discover &rArr; ble_gattc_characteristics_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_characteristics_discover_rsp_enc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_characteristics_discover_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>conn_mw_ble_gattc_descriptors_discover</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gattc_descriptors_discover &rArr; ble_gattc_descriptors_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_descriptors_discover_rsp_enc
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_descriptors_discover_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>conn_mw_ble_gattc_exchange_mtu_request</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_exchange_mtu_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gattc_exchange_mtu_request &rArr; ble_gattc_exchange_mtu_request_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu_request_rsp_enc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu_request_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>conn_mw_ble_gattc_hv_confirm</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_hv_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gattc_hv_confirm &rArr; ble_gattc_hv_confirm_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_hv_confirm_rsp_enc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_hv_confirm_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>conn_mw_ble_gattc_primary_services_discover</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_primary_services_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = conn_mw_ble_gattc_primary_services_discover &rArr; ble_gattc_primary_services_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_primary_services_discover_rsp_enc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_primary_services_discover_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>conn_mw_ble_gattc_read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_mw_ble_gattc_read &rArr; ble_gattc_read_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_rsp_enc
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>conn_mw_ble_gattc_relationships_discover</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_relationships_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = conn_mw_ble_gattc_relationships_discover &rArr; ble_gattc_relationships_discover_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_relationships_discover_rsp_enc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_relationships_discover_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>conn_mw_ble_gattc_write</STRONG> (Thumb, 72 bytes, Stack size 280 bytes, conn_mw_ble_gattc.o(i.conn_mw_ble_gattc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = conn_mw_ble_gattc_write &rArr; ble_gattc_write_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_rsp_enc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>conn_mw_ble_gatts_attr_get</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_attr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_ble_gatts_attr_get &rArr; ble_gatts_attr_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_rsp_enc
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>conn_mw_ble_gatts_characteristic_add</STRONG> (Thumb, 164 bytes, Stack size 1152 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = conn_mw_ble_gatts_characteristic_add &rArr; ble_gatts_characteristic_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_rsp_enc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>conn_mw_ble_gatts_descriptor_add</STRONG> (Thumb, 90 bytes, Stack size 576 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_descriptor_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = conn_mw_ble_gatts_descriptor_add &rArr; ble_gatts_descriptor_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_rsp_enc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>conn_mw_ble_gatts_exchange_mtu_reply</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_exchange_mtu_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_ble_gatts_exchange_mtu_reply &rArr; ble_gatts_exchange_mtu_reply_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_exchange_mtu_reply_rsp_enc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_exchange_mtu_reply_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>conn_mw_ble_gatts_hvx</STRONG> (Thumb, 88 bytes, Stack size 560 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_hvx))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = conn_mw_ble_gatts_hvx &rArr; ble_gatts_hvx_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_rsp_enc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>conn_mw_ble_gatts_include_add</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_include_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = conn_mw_ble_gatts_include_add &rArr; ble_gatts_include_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_rsp_enc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>conn_mw_ble_gatts_initial_user_handle_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_initial_user_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conn_mw_ble_gatts_initial_user_handle_get &rArr; ble_gatts_initial_user_handle_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_rsp_enc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>conn_mw_ble_gatts_rw_authorize_reply</STRONG> (Thumb, 70 bytes, Stack size 552 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_rw_authorize_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = conn_mw_ble_gatts_rw_authorize_reply &rArr; ble_gatts_rw_authorize_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_rsp_enc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>conn_mw_ble_gatts_service_add</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_service_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_ble_gatts_service_add &rArr; ble_gatts_service_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_rsp_enc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>conn_mw_ble_gatts_service_changed</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_service_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_mw_ble_gatts_service_changed &rArr; ble_gatts_service_changed_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_changed_rsp_enc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_changed_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>conn_mw_ble_gatts_sys_attr_get</STRONG> (Thumb, 88 bytes, Stack size 552 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_sys_attr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = conn_mw_ble_gatts_sys_attr_get &rArr; ble_gatts_sys_attr_get_rsp_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_rsp_enc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>conn_mw_ble_gatts_sys_attr_set</STRONG> (Thumb, 80 bytes, Stack size 552 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_sys_attr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = conn_mw_ble_gatts_sys_attr_set &rArr; ble_gatts_sys_attr_set_req_dec &rArr; len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_rsp_enc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>conn_mw_ble_gatts_value_get</STRONG> (Thumb, 74 bytes, Stack size 552 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_value_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = conn_mw_ble_gatts_value_get &rArr; ble_gatts_value_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_rsp_enc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>conn_mw_ble_gatts_value_set</STRONG> (Thumb, 80 bytes, Stack size 552 bytes, conn_mw_ble_gatts.o(i.conn_mw_ble_gatts_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = conn_mw_ble_gatts_value_set &rArr; ble_gatts_value_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_rsp_enc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>conn_mw_ble_opt_get</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, conn_mw_ble.o(i.conn_mw_ble_opt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_ble_opt_get &rArr; ble_opt_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_rsp_enc
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>conn_mw_ble_opt_set</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, conn_mw_ble.o(i.conn_mw_ble_opt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_mw_ble_opt_set &rArr; ble_opt_set_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_rsp_enc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_req_dec
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_id_pre_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>conn_mw_ble_user_mem_reply</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, conn_mw_ble.o(i.conn_mw_ble_user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = conn_mw_ble_user_mem_reply &rArr; ble_user_mem_reply_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_reply_rsp_enc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_reply_req_dec
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_user_mem_context_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>conn_mw_ble_uuid_decode</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, conn_mw_ble.o(i.conn_mw_ble_uuid_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = conn_mw_ble_uuid_decode &rArr; ble_uuid_decode_req_dec &rArr; len8data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_rsp_enc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>conn_mw_ble_uuid_encode</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, conn_mw_ble.o(i.conn_mw_ble_uuid_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = conn_mw_ble_uuid_encode &rArr; ble_uuid_encode_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_rsp_enc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>conn_mw_ble_uuid_vs_add</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, conn_mw_ble.o(i.conn_mw_ble_uuid_vs_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = conn_mw_ble_uuid_vs_add &rArr; ble_uuid_vs_add_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_rsp_enc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>conn_mw_ble_version_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, conn_mw_ble.o(i.conn_mw_ble_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = conn_mw_ble_version_get &rArr; ble_version_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_rsp_enc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>conn_mw_ecb_block_encrypt</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, conn_mw_nrf_soc.o(i.conn_mw_ecb_block_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = conn_mw_ecb_block_encrypt &rArr; ecb_block_encrypt_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_rsp_enc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[3cb]"></a>conn_mw_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, conn_mw.o(i.conn_mw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_mw_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>

<P><STRONG><a name="[115]"></a>conn_mw_l2cap_ch_flow_control</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_flow_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_l2cap_ch_flow_control &rArr; ble_l2cap_ch_flow_control_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_rsp_enc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>conn_mw_l2cap_ch_release</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_mw_l2cap_ch_release &rArr; ble_l2cap_ch_release_req_dec &rArr; uint16_t_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_release_rsp_enc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_release_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>conn_mw_l2cap_ch_rx</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = conn_mw_l2cap_ch_rx &rArr; ble_l2cap_ch_rx_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_rsp_enc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>conn_mw_l2cap_ch_setup</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_mw_l2cap_ch_setup &rArr; ble_l2cap_ch_setup_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_rsp_enc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>conn_mw_l2cap_ch_tx</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, conn_mw_ble_l2cap.o(i.conn_mw_l2cap_ch_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = conn_mw_l2cap_ch_tx &rArr; ble_l2cap_ch_tx_req_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_rsp_enc
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>conn_mw_power_system_off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, conn_mw_nrf_soc.o(i.conn_mw_power_system_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_mw_power_system_off
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_system_off_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>conn_mw_temp_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, conn_mw_nrf_soc.o(i.conn_mw_temp_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = conn_mw_temp_get &rArr; temp_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_rsp_enc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_req_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mw.o(.constdata)
</UL>
<P><STRONG><a name="[299]"></a>count16_cond_data16_dec</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, ble_serialization.o(i.count16_cond_data16_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = count16_cond_data16_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_dec
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_values_read_req_dec
</UL>

<P><STRONG><a name="[337]"></a>crc16_compute</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, crc16.o(i.crc16_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_send
</UL>

<P><STRONG><a name="[3c0]"></a>drv_rtc_compare_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[30f]"></a>drv_rtc_compare_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_compare_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_compare_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[18f]"></a>drv_rtc_compare_set</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_rtc.o(i.drv_rtc_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[18a]"></a>drv_rtc_counter_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>

<P><STRONG><a name="[18d]"></a>drv_rtc_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, drv_rtc.o(i.drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[3ec]"></a>drv_rtc_irq_trigger</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_irq_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[18e]"></a>drv_rtc_overflow_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_enable))
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[313]"></a>drv_rtc_overflow_pending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_overflow_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_overflow_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3c5]"></a>drv_rtc_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_start))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3c4]"></a>drv_rtc_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_rtc.o(i.drv_rtc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[314]"></a>drv_rtc_windowed_compare_set</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, drv_rtc.o(i.drv_rtc_windowed_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[316]"></a>dtm_cmd</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ble_dtm.o(i.dtm_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dtm_cmd &rArr; on_test_transmit_cmd &rArr; radio_prepare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_setup_cmd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_test_done
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[3b5]"></a>dtm_constant_carrier</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_dtm_hw_nrf52.o(i.dtm_constant_carrier))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
</UL>

<P><STRONG><a name="[326]"></a>dtm_event_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_dtm.o(i.dtm_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[31b]"></a>dtm_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_dtm.o(i.dtm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dtm_init &rArr; timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[320]"></a>dtm_radio_validate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ble_dtm_hw_nrf52.o(i.dtm_radio_validate))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_set_txpower
</UL>

<P><STRONG><a name="[31f]"></a>dtm_set_txpower</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_dtm.o(i.dtm_set_txpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dtm_set_txpower
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_radio_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
</UL>

<P><STRONG><a name="[321]"></a>dtm_start</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dtm_uart.o(i.dtm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dtm_start &rArr; uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_wait
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_event_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_is_ready_to_enter_dtm
</UL>

<P><STRONG><a name="[328]"></a>dtm_turn_off_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_dtm_hw_nrf52.o(i.dtm_turn_off_test))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_test_done
</UL>

<P><STRONG><a name="[323]"></a>dtm_wait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_dtm.o(i.dtm_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dtm_wait &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[308]"></a>ecb_block_encrypt_req_dec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_soc_conn.o(i.ecb_block_encrypt_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ecb_block_encrypt_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ecb_block_encrypt
</UL>

<P><STRONG><a name="[309]"></a>ecb_block_encrypt_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, nrf_soc_conn.o(i.ecb_block_encrypt_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecb_block_encrypt_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ecb_block_encrypt
</UL>

<P><STRONG><a name="[1ff]"></a>len16data_dec</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, ble_serialization.o(i.len16data_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = len16data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_dec
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set_req_dec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_t_dec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_md_t_dec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_t_dec
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_req_dec
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_params_t_dec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_authorize_params_t_dec
</UL>

<P><STRONG><a name="[201]"></a>len16data_enc</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, ble_serialization.o(i.len16data_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = len16data_enc &rArr; buf_enc &rArr; uint8_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_t_enc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_rsp_enc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_enc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_enc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_enc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_t_enc
</UL>

<P><STRONG><a name="[2e3]"></a>len8data_dec</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, ble_serialization.o(i.len8data_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = len8data_dec &rArr; buf_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_req_dec
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = main &rArr; ser_conn_rx_process &rArr; ser_conn_received_pkt_process &rArr; ser_conn_command_process &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_open
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_rx_process
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_on_no_mem_handler_set
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_suspended
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_trigger_usb_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_serial_num_generate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_queue_space_get
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18c]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1c8]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[1db]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[1da]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[1ca]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[1a9]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[1cc]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>

<P><STRONG><a name="[358]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[1c9]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>

<P><STRONG><a name="[1dc]"></a>nrf_atomic_u32_sub_hs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub_hs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub_hs
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
</UL>

<P><STRONG><a name="[2fe]"></a>nrf_balloc_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_alloc
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_free
</UL>

<P><STRONG><a name="[301]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_init
</UL>

<P><STRONG><a name="[34e]"></a>nrf_dfu_trigger_usb_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_dfu_trigger_usb.o(i.nrf_dfu_trigger_usb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_dfu_trigger_usb_init &rArr; app_usbd_class_append &rArr; app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strings_create
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34c]"></a>nrf_drv_clock_hfclk_is_running</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_clock_hfclk_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_hfclk_release &rArr; nrfx_clock_hfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[34b]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[34a]"></a>nrf_drv_clock_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[366]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_wdt_started
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[1e0]"></a>nrf_drv_power_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_power_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[1e5]"></a>nrf_drv_power_usbevt_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_power_usbevt_init &rArr; nrf_drv_power_usbevt_uninit &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_enable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
</UL>

<P><STRONG><a name="[36c]"></a>nrf_drv_power_usbevt_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_usbevt_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_power_usbevt_uninit &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_uninit
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usbevt_disable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[371]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c9]"></a>nrf_ecb_hal_data_t_in_dec</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_soc_struct_serialization.o(i.nrf_ecb_hal_data_t_in_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_ecb_hal_data_t_in_dec &rArr; uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_soc_conn.o(i.ecb_block_encrypt_req_dec)
</UL>
<P><STRONG><a name="[ca]"></a>nrf_ecb_hal_data_t_out_enc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_soc_struct_serialization.o(i.nrf_ecb_hal_data_t_out_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_ecb_hal_data_t_out_enc &rArr; uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_vector_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_soc_conn.o(i.ecb_block_encrypt_rsp_enc)
</UL>
<P><STRONG><a name="[33f]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_queue_generic_pop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
</UL>

<P><STRONG><a name="[37e]"></a>nrf_queue_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[380]"></a>nrf_queue_is_full</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[33d]"></a>nrf_queue_push</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
</UL>

<P><STRONG><a name="[382]"></a>nrf_queue_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_reset
</UL>

<P><STRONG><a name="[383]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_queue_utilization_get &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
</UL>

<P><STRONG><a name="[303]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_ble_enable
</UL>

<P><STRONG><a name="[386]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>

<P><STRONG><a name="[34f]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_start_from_app_sched
</UL>

<P><STRONG><a name="[16e]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[35f]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_idle
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[352]"></a>nrf_sdh_is_suspended</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[354]"></a>nrf_sdh_resume</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_sdh_resume &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38c]"></a>nrf_sdh_suspend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_sdh_suspend &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_handle
</UL>

<P><STRONG><a name="[384]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>

<P><STRONG><a name="[385]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>

<P><STRONG><a name="[3c2]"></a>nrf_sortlist_add</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_sortlist.o(i.nrf_sortlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sortlist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3c1]"></a>nrf_sortlist_peek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_peek))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3e6]"></a>nrf_sortlist_pop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_pop))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>

<P><STRONG><a name="[3eb]"></a>nrf_sortlist_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_sortlist.o(i.nrf_sortlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[32f]"></a>nrfx_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_atomic.o(i.nrfx_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrfx_atomic_c_3bd32246__nrfx_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
</UL>

<P><STRONG><a name="[364]"></a>nrfx_clock_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[362]"></a>nrfx_clock_hfclk_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[360]"></a>nrfx_clock_hfclk_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_hfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[363]"></a>nrfx_clock_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[16b]"></a>nrfx_clock_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrfx_clock.o(i.nrfx_clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_clock_irq_handler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[367]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[368]"></a>nrfx_power_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_init
</UL>

<P><STRONG><a name="[16a]"></a>nrfx_power_irq_handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nrfx_power.o(i.nrfx_power_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_irq_handler &rArr; nrf_power_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[369]"></a>nrfx_power_pof_handler_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_pof_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_soc_evt_handler
</UL>

<P><STRONG><a name="[36a]"></a>nrfx_power_usb_handler_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usb_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_soc_evt_handler
</UL>

<P><STRONG><a name="[36f]"></a>nrfx_power_usbevt_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[36e]"></a>nrfx_power_usbevt_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[36d]"></a>nrfx_power_usbevt_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
</UL>

<P><STRONG><a name="[370]"></a>nrfx_power_usbevt_uninit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_power.o(i.nrfx_power_usbevt_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
</UL>

<P><STRONG><a name="[393]"></a>nrfx_prs_acquire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[395]"></a>nrfx_prs_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[de]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[374]"></a>nrfx_uart_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[325]"></a>nrfx_uart_rx</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[39b]"></a>nrfx_uart_rx_enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrfx_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_uart_rx_enable &rArr; rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[376]"></a>nrfx_uart_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[39c]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[39e]"></a>nrfx_uart_uninit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_uart_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[df]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[373]"></a>nrfx_uarte_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[324]"></a>nrfx_uarte_rx</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[375]"></a>nrfx_uarte_tx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[3a2]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[3a3]"></a>nrfx_uarte_uninit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[3e8]"></a>nrfx_usbd_active_irq_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_active_irq_config))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[d5]"></a>nrfx_usbd_consumer</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nrfx_usbd.o(i.nrfx_usbd_consumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrfx_usbd_consumer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[1bc]"></a>nrfx_usbd_disable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
</UL>

<P><STRONG><a name="[1be]"></a>nrfx_usbd_enable</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrfx_usbd_enable &rArr; usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_enable
</UL>

<P><STRONG><a name="[3a8]"></a>nrfx_usbd_ep_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrfx_usbd_ep_abort &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[1c0]"></a>nrfx_usbd_ep_disable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrfx_usbd_ep_disable &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_disable
</UL>

<P><STRONG><a name="[1c1]"></a>nrfx_usbd_ep_dtoggle_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_dtoggle_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[1c3]"></a>nrfx_usbd_ep_enable</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrfx_usbd_ep_enable &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_int
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[1c4]"></a>nrfx_usbd_ep_enable_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_enable_check))
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep_enable_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[1c5]"></a>nrfx_usbd_ep_handled_transfer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_handled_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrfx_usbd_ep_handled_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rise
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[1ba]"></a>nrfx_usbd_ep_max_packet_size_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_max_packet_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_ep_max_packet_size_get
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
</UL>

<P><STRONG><a name="[3ad]"></a>nrfx_usbd_ep_max_packet_size_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_max_packet_size_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
</UL>

<P><STRONG><a name="[1d8]"></a>nrfx_usbd_ep_stall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[3ae]"></a>nrfx_usbd_ep_stall_check</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_check))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
</UL>

<P><STRONG><a name="[1c2]"></a>nrfx_usbd_ep_stall_clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrfx_usbd_ep_stall_clear &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_enable
</UL>

<P><STRONG><a name="[1c6]"></a>nrfx_usbd_ep_transfer</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rise
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>

<P><STRONG><a name="[3f5]"></a>nrfx_usbd_epout_size_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_epout_size_get))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[3f3]"></a>nrfx_usbd_feeder_buffer_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_buffer_get))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_descriptor_conf_feeder
</UL>

<P><STRONG><a name="[d4]"></a>nrfx_usbd_feeder_flash</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_usbd_feeder_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[d2]"></a>nrfx_usbd_feeder_flash_zlp</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_flash_zlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_usbd_feeder_flash_zlp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[d3]"></a>nrfx_usbd_feeder_ram</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram))
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[d1]"></a>nrfx_usbd_feeder_ram_zlp</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_feeder_ram_zlp))
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(i.nrfx_usbd_ep_transfer)
</UL>
<P><STRONG><a name="[1d7]"></a>nrfx_usbd_force_bus_wakeup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_force_bus_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1de]"></a>nrfx_usbd_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_usbd.o(i.nrfx_usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_usbd_init &rArr; nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[1e4]"></a>nrfx_usbd_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_user_evt_handler
</UL>

<P><STRONG><a name="[1e3]"></a>nrfx_usbd_is_initialized</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_is_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_events_enable
</UL>

<P><STRONG><a name="[1b1]"></a>nrfx_usbd_last_setup_dir_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_last_setup_dir_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
</UL>

<P><STRONG><a name="[1af]"></a>nrfx_usbd_setup_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_clear))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[1ae]"></a>nrfx_usbd_setup_data_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_data_clear))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[1b2]"></a>nrfx_usbd_setup_get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[1ac]"></a>nrfx_usbd_setup_stall</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_setup_stall))
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[1d0]"></a>nrfx_usbd_start</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_start))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1d1]"></a>nrfx_usbd_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_IS_ENABLED
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1d5]"></a>nrfx_usbd_suspend</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = nrfx_usbd_suspend &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[3e9]"></a>nrfx_usbd_suspend_irq_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_suspend_irq_config))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[3ab]"></a>nrfx_usbd_transfer_out_drop</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_transfer_out_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[1e1]"></a>nrfx_usbd_uninit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[1d6]"></a>nrfx_usbd_wakeup_req</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrfx_usbd_wakeup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_usbd_wakeup_req &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_171
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_lowpower_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[16f]"></a>nvmc_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_nrf52.o(i.nvmc_config))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3b6]"></a>op_status_enc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_serialization.o(i.op_status_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = op_status_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>

<P><STRONG><a name="[30a]"></a>power_system_off_req_dec</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_soc_conn.o(i.power_system_off_req_dec))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_power_system_off
</UL>

<P><STRONG><a name="[1fb]"></a>ser_ble_cmd_rsp_status_code_enc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_serialization.o(i.ser_ble_cmd_rsp_status_code_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ser_ble_cmd_rsp_status_code_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_whitelist_set_rsp_enc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_power_set_rsp_enc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_info_reply_rsp_enc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_stop_rsp_enc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_start_rsp_enc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_stop_rsp_enc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_start_rsp_enc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_stop_rsp_enc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_start_rsp_enc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_set_rsp_enc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_set_rsp_enc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phy_update_rsp_enc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_set_rsp_enc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_reply_rsp_enc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_keypress_notify_rsp_enc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encrypt_rsp_enc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disconnect_rsp_enc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_set_rsp_enc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_identities_set_rsp_enc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_rsp_enc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_cancel_rsp_enc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_rsp_enc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_authenticate_rsp_enc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_rsp_enc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_set_rsp_enc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_rsp_enc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start_rsp_enc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_set_rsp_enc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_reply_rsp_enc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_rsp_enc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_enable_rsp_enc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_rsp_enc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_rsp_enc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_changed_rsp_enc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_rsp_enc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_exchange_mtu_reply_rsp_enc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_rsp_enc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_relationships_discover_rsp_enc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_rsp_enc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_primary_services_discover_rsp_enc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_hv_confirm_rsp_enc
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu_request_rsp_enc
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_descriptors_discover_rsp_enc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_characteristics_discover_rsp_enc
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_values_read_rsp_enc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_value_by_uuid_read_rsp_enc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info_discover_rsp_enc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_rsp_enc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_rsp_enc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_release_rsp_enc
</UL>

<P><STRONG><a name="[d7]"></a>ser_conn_ble_event_encoder</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ser_conn_event_encoder.o(i.ser_conn_ble_event_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ser_conn_ble_event_encoder &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_pause
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_event_enc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_alloc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_on_no_mem_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_conn_handlers.o(i.ser_conn_ble_event_handle)
</UL>
<P><STRONG><a name="[157]"></a>ser_conn_ble_event_handle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ser_conn_handlers.o(i.ser_conn_ble_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ser_conn_ble_event_handle &rArr; nrf_sdh_suspend &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_queue_space_get
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_conn_handlers.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[3ca]"></a>ser_conn_command_process</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ser_conn_cmd_decoder.o(i.ser_conn_command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ser_conn_command_process &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_status_enc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_handler
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_alloc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_on_no_mem_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
</UL>

<P><STRONG><a name="[3cc]"></a>ser_conn_dtm_command_process</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ser_conn_dtm_cmd_decoder.o(i.ser_conn_dtm_command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ser_conn_dtm_command_process &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dtm_init_rsp_enc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dtm_init_req_dec
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_alloc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_on_no_mem_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
</UL>

<P><STRONG><a name="[3cd]"></a>ser_conn_generic_command_process</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ser_conn_reset_cmd_decoder.o(i.ser_conn_generic_command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ser_conn_generic_command_process &rArr; soft_reset_trigger &rArr; nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
</UL>

<P><STRONG><a name="[cb]"></a>ser_conn_hal_transport_event_handle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ser_conn_handlers.o(i.ser_conn_hal_transport_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ser_conn_hal_transport_event_handle &rArr; ser_conn_is_ready_to_enter_dtm &rArr; dtm_start &rArr; uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_resume
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_pause
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_is_ready_to_enter_dtm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3ce]"></a>ser_conn_is_ready_to_enter_dtm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ser_conn_dtm_cmd_decoder.o(i.ser_conn_is_ready_to_enter_dtm))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ser_conn_is_ready_to_enter_dtm &rArr; dtm_start &rArr; uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_close
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_hal_transport_event_handle
</UL>

<P><STRONG><a name="[3c9]"></a>ser_conn_on_no_mem_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ser_conn_handlers.o(i.ser_conn_on_no_mem_handler))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>

<P><STRONG><a name="[350]"></a>ser_conn_on_no_mem_handler_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ser_conn_handlers.o(i.ser_conn_on_no_mem_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d0]"></a>ser_conn_received_pkt_process</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ser_conn_pkt_decoder.o(i.ser_conn_received_pkt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ser_conn_received_pkt_process &rArr; ser_conn_command_process &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_rx_pkt_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_generic_command_process
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_rx_process
</UL>

<P><STRONG><a name="[3d1]"></a>ser_conn_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ser_conn_handlers.o(i.ser_conn_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ser_conn_reset &rArr; conn_ble_l2cap_sdu_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_user_mem_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_l2cap_sdu_pool_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_ble_gap_sec_keys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>

<P><STRONG><a name="[355]"></a>ser_conn_rx_process</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ser_conn_handlers.o(i.ser_conn_rx_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ser_conn_rx_process &rArr; ser_conn_received_pkt_process &rArr; ser_conn_command_process &rArr; ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cf]"></a>ser_hal_transport_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ser_hal_transport.o(i.ser_hal_transport_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ser_hal_transport_close &rArr; ser_phy_interrupts_disable &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_disable
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_is_ready_to_enter_dtm
</UL>

<P><STRONG><a name="[34d]"></a>ser_hal_transport_open</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ser_hal_transport.o(i.ser_hal_transport_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ser_hal_transport_open &rArr; ser_phy_open &rArr; ser_phy_hci_slip_open &rArr; app_usbd_class_append &rArr; app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_open
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ea]"></a>ser_hal_transport_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ser_hal_transport.o(i.ser_hal_transport_reset))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[3ba]"></a>ser_hal_transport_rx_pkt_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ser_hal_transport.o(i.ser_hal_transport_rx_pkt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ser_hal_transport_rx_pkt_free &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_rx_buf_set
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_events_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_received_pkt_process
</UL>

<P><STRONG><a name="[3c7]"></a>ser_hal_transport_tx_pkt_alloc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ser_hal_transport.o(i.ser_hal_transport_tx_pkt_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ser_hal_transport_tx_pkt_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>

<P><STRONG><a name="[3b8]"></a>ser_hal_transport_tx_pkt_free</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ser_hal_transport.o(i.ser_hal_transport_tx_pkt_free))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_events_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
</UL>

<P><STRONG><a name="[3c8]"></a>ser_hal_transport_tx_pkt_send</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ser_hal_transport.o(i.ser_hal_transport_tx_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ser_hal_transport_tx_pkt_send &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_tx_pkt_send
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_ble_event_encoder
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_dtm_command_process
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_command_process
</UL>

<P><STRONG><a name="[3d5]"></a>ser_phy_close</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ser_phy_hci.o(i.ser_phy_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ser_phy_close
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_close
</UL>

<P><STRONG><a name="[3db]"></a>ser_phy_hci_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ser_phy_hci.o(i.ser_phy_hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ser_phy_hci_reset &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[3da]"></a>ser_phy_hci_slip_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ser_phy_hci_slip_cdc.o(i.ser_phy_hci_slip_close))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_close
</UL>

<P><STRONG><a name="[3dd]"></a>ser_phy_hci_slip_open</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ser_phy_hci_slip_cdc.o(i.ser_phy_hci_slip_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ser_phy_hci_slip_open &rArr; app_usbd_class_append &rArr; app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_open
</UL>

<P><STRONG><a name="[3de]"></a>ser_phy_hci_slip_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ser_phy_hci_slip_cdc.o(i.ser_phy_hci_slip_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[33b]"></a>ser_phy_hci_slip_rx_buf_free</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ser_phy_hci_slip_cdc.o(i.ser_phy_hci_slip_rx_buf_free))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_ack_buffer
</UL>

<P><STRONG><a name="[181]"></a>ser_phy_hci_slip_tx_pkt_send</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ser_phy_hci_slip_cdc.o(i.ser_phy_hci_slip_tx_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_transmit
</UL>

<P><STRONG><a name="[3d4]"></a>ser_phy_interrupts_disable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ser_phy_hci.o(i.ser_phy_interrupts_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ser_phy_interrupts_disable &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_rx_pkt_free
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_close
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
</UL>

<P><STRONG><a name="[3d7]"></a>ser_phy_interrupts_enable</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ser_phy_hci.o(i.ser_phy_interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_signal_timeout_event
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_rx_pkt_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
</UL>

<P><STRONG><a name="[3d6]"></a>ser_phy_open</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ser_phy_hci.o(i.ser_phy_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ser_phy_open &rArr; ser_phy_hci_slip_open &rArr; app_usbd_class_append &rArr; app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_open
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_timer_reset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_open
</UL>

<P><STRONG><a name="[3b9]"></a>ser_phy_rx_buf_set</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ser_phy_hci.o(i.ser_phy_rx_buf_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ser_phy_rx_buf_set &rArr; hci_rx_event_handler &rArr; hci_rx_fsm &rArr; hci_rx_fsm_event_process &rArr; ack_transmit &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_events_handler
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_rx_pkt_free
</UL>

<P><STRONG><a name="[3d8]"></a>ser_phy_tx_pkt_send</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ser_phy_hci.o(i.ser_phy_tx_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ser_phy_tx_pkt_send &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_send
</UL>

<P><STRONG><a name="[175]"></a>set_strict_mode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_dtm.o(i.set_strict_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_strict_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[342]"></a>soft_reset_trigger</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ser_conn_reset_cmd_decoder.o(i.soft_reset_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = soft_reset_trigger &rArr; nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_conn_generic_command_process
</UL>

<P><STRONG><a name="[30b]"></a>temp_get_req_dec</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_soc_conn.o(i.temp_get_req_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = temp_get_req_dec &rArr; cond_field_dec &rArr; uint8_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_temp_get
</UL>

<P><STRONG><a name="[30c]"></a>temp_get_rsp_enc</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, nrf_soc_conn.o(i.temp_get_rsp_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = temp_get_rsp_enc &rArr; cond_field_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_t_enc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mw_temp_get
</UL>

<P><STRONG><a name="[da]"></a>timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ser_conn_reset_cmd_decoder.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = timer_handler &rArr; ser_phy_hci_reset &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_reset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_reset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_conn_reset_cmd_decoder.o(i.soft_reset_trigger)
</UL>
<P><STRONG><a name="[30d]"></a>uint16_dec</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ble_serialization.o(i.uint16_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uint16_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count16_cond_data16_dec
</UL>

<P><STRONG><a name="[5b]"></a>uint16_t_dec</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_serialization.o(i.uint16_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint16_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_dec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_params_t_dec
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_dec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_id_t_dec
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_params_t_dec
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_params_t_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_power_set_req_dec
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_req_dec
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_info_reply_req_dec
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_stop_req_dec
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_start_req_dec
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_req_dec
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phy_update_req_dec
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_set_req_dec
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_req_dec
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_reply_req_dec
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_keypress_notify_req_dec
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_encrypt_req_dec
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disconnect_req_dec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_req_dec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_req_dec
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_param_update_req_dec
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_authenticate_req_dec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_req_dec
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_set_req_dec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_t_dec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_block_t_dec
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_conn_cfg_t_dec
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_conn_cfg_t_dec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_slave_latency_disable_t_dec
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_local_conn_latency_t_dec
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_ch_map_t_dec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_auth_payload_timeout_t_dec
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cfg_t_dec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_cfg_device_name_t_dec
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_mem_reply_req_dec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_t_dec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_params_t_dec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_md_t_dec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_t_dec
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_req_dec
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_req_dec
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_req_dec
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_req_dec
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_changed_req_dec
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_req_dec
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_req_dec
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_req_dec
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_exchange_mtu_reply_req_dec
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_req_dec
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_req_dec
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_req_dec
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_params_t_dec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_handle_range_t_dec
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_req_dec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_relationships_discover_req_dec
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_read_req_dec
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_primary_services_discover_req_dec
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_hv_confirm_req_dec
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_exchange_mtu_request_req_dec
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_descriptors_discover_req_dec
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_characteristics_discover_req_dec
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_values_read_req_dec
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_value_by_uuid_read_req_dec
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info_discover_req_dec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_params_t_dec
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_params_t_dec
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_req_dec
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_req_dec
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_release_req_dec
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_req_dec
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_pf_t_dec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_authorize_params_t_dec
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ble_l2cap_conn.o(i.ble_l2cap_ch_setup_req_dec)
<LI> ble_gap_conn.o(i.ble_gap_device_name_get_req_dec)
<LI> ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_dec)
<LI> ble_gatts_conn.o(i.ble_gatts_sys_attr_get_req_dec)
<LI> ble_gatts_struct_serialization.o(i.ble_gatts_hvx_params_t_dec)
</UL>
<P><STRONG><a name="[50]"></a>uint16_t_enc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_serialization.o(i.uint16_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint16_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len16data_enc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_enc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_limitation_t_enc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_params_t_enc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_tx_enc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_request_enc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_refused_enc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_enc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_sdu_buf_released_enc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_rx_enc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_released_enc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_credit_enc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_enc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_timeout_enc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sys_attr_missing_enc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sc_confirm_enc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_enc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvn_tx_complete_enc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvc_enc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_exchange_mtu_request_enc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_enc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_cmd_tx_complete_enc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_timeout_enc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_rel_disc_rsp_enc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_read_rsp_enc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_prim_srvc_disc_rsp_enc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_enc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_exchange_mtu_rsp_enc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_desc_disc_rsp_enc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_vals_read_rsp_enc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_val_by_uuid_read_rsp_enc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_disc_rsp_enc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_enc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_timeout_enc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_request_enc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_params_request_enc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_info_request_enc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_scan_req_report_enc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_rssi_changed_enc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_qos_channel_survey_report_enc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_request_enc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_enc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_passkey_display_enc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_lesc_dhkey_request_enc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_key_pressed_enc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_enc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_request_enc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_enc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_connected_enc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_sec_update_enc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_request_enc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_enc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_enc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_key_request_enc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_set_terminated_enc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_enc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_request_enc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_release_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_t_enc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_t_enc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_local_conn_latency_t_enc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_ch_map_t_enc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_auth_payload_timeout_t_enc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_id_t_enc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_aux_pointer_t_enc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_report_type_t_enc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_t_enc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_params_t_enc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_t_enc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvc_t_enc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_exchange_mtu_request_t_enc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_t_enc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_handles_t_enc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_include_t_enc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_handle_range_t_enc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_desc_t_enc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_t_enc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info16_t_enc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info128_t_enc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_t_enc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_rel_disc_rsp_t_enc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_read_rsp_t_enc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_prim_srvc_disc_rsp_t_enc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_t_enc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_exchange_mtu_rsp_t_enc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_desc_disc_rsp_t_enc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_vals_read_rsp_t_enc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_disc_rsp_t_enc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_t_enc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_params_t_enc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_read_t_enc
</UL>
<BR>[Address Reference Count : 11]<UL><LI> ble_gatts_conn.o(i.ble_gatts_descriptor_add_rsp_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_hvx_rsp_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_include_add_rsp_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_initial_user_handle_get_rsp_enc)
<LI> ble_l2cap_conn.o(i.ble_l2cap_ch_flow_control_rsp_enc)
<LI> ble_l2cap_conn.o(i.ble_l2cap_ch_setup_rsp_enc)
<LI> ble_gap_conn.o(i.ble_gap_appearance_get_rsp_enc)
<LI> ble_gap_conn.o(i.ble_gap_device_name_get_rsp_enc)
<LI> ble_gap_struct_serialization.o(i.ble_gap_opt_local_conn_latency_t_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_service_add_rsp_enc)
<LI> ble_gatts_conn.o(i.ble_gatts_sys_attr_get_rsp_enc)
</UL>
<P><STRONG><a name="[1f7]"></a>uint32_t_dec</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ble_serialization.o(i.uint32_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint32_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_dec
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_qos_channel_survey_start_req_dec
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_cfg_attr_tab_size_t_dec
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_req_dec
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_id_pre_dec
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_req_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_req_dec
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_set_req_dec
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_req_dec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_params_t_dec
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_tx_req_dec
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_rx_req_dec
</UL>

<P><STRONG><a name="[db]"></a>uint32_t_enc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_serialization.o(i.uint32_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint32_t_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_rsp_enc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_rsp_enc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_rsp_enc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_rsp_enc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_rsp_enc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_rsp_enc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_rsp_enc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_rsp_enc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_rsp_enc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_rsp_enc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_rsp_enc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_tx_enc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_sdu_buf_released_enc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_rx_enc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dtm_init_rsp_enc
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_rsp_enc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_rsp_enc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_rsp_enc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_rsp_enc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_rsp_enc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_data_t_enc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_rsp_enc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_rsp_enc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_rsp_enc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_rsp_enc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_rsp_enc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_rsp_enc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_rsp_enc
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_rsp_enc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_rsp_enc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_rsp_enc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_rsp_enc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_rsp_enc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_rsp_enc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_rsp_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_soc_conn.o(i.temp_get_rsp_enc)
</UL>
<P><STRONG><a name="[2f1]"></a>uint8_dec</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ble_serialization.o(i.uint8_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uint8_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_dec
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond_field_dec
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count16_cond_data16_dec
</UL>

<P><STRONG><a name="[4c]"></a>uint8_t_dec</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_serialization.o(i.uint8_t_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint8_t_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_t_dec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_scan_params_t_dec
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_dec
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phys_t_dec
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_info_t_dec
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_mode_t_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_t_dec
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_whitelist_set_req_dec
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_tx_power_set_req_dec
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_req_dec
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_start_req_dec
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_keypress_notify_req_dec
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_disconnect_req_dec
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_identities_set_req_dec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_connect_req_dec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_auth_key_reply_req_dec
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_stop_req_dec
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_start_req_dec
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dtm_init_req_dec
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;len8data_dec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_t_dec
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_conn_cfg_t_dec
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_conn_cfg_t_dec
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_cfg_service_changed_t_dec
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_conn_cfg_t_dec
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_slave_latency_disable_t_dec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_compat_mode_1_t_dec
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_cfg_t_dec
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_cfg_role_count_t_dec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_cfg_device_name_t_dec
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_pa_lna_t_dec
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_conn_evt_ext_t_dec
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_cfg_vs_uuid_t_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_req_dec
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_char_props_t_dec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_char_ext_props_t_dec
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_kdist_t_dec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_properties_t_dec
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_params_t_dec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_params_t_dec
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_req_dec
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_write_params_t_dec
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pa_lna_cfg_t_dec
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_pf_t_dec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_authorize_params_t_dec
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_md_t_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_conn.o(i.ble_gap_adv_set_configure_req_dec)
</UL>
<P><STRONG><a name="[4f]"></a>uint8_t_enc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_serialization.o(i.uint8_t_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint8_t_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_params_t_enc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_t_enc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_t_enc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_reply_rsp_enc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_rssi_get_rsp_enc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_privacy_get_rsp_enc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_ppcp_get_rsp_enc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_get_rsp_enc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_device_name_get_rsp_enc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_data_length_update_rsp_enc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_get_rsp_enc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_appearance_get_rsp_enc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_set_configure_rsp_enc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_get_rsp_enc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_refused_enc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvn_tx_complete_enc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_cmd_tx_complete_enc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_timeout_enc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_scan_req_report_enc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_rssi_changed_enc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_enc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_passkey_display_enc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_lesc_dhkey_request_enc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_key_pressed_enc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_key_request_enc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_request_enc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_user_mem_release_enc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_t_enc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_t_enc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_compat_mode_1_t_enc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_pa_lna_t_enc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_conn_evt_ext_t_enc
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_rsp_enc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_vs_add_rsp_enc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_rsp_enc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_decode_rsp_enc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_rsp_enc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_char_props_t_enc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_enc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_t_enc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_levels_t_enc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_kdist_t_enc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_info_t_enc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_mode_t_enc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_aux_pointer_t_enc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_phys_t_enc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_request_t_enc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_info_request_t_enc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_t_enc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_connected_t_enc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_t_enc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_set_terminated_t_enc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_t_enc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_t_enc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_timeout_t_enc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sys_attr_missing_t_enc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_t_enc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_md_t_enc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_set_rsp_enc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_value_get_rsp_enc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_sys_attr_get_rsp_enc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_service_add_rsp_enc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_initial_user_handle_get_rsp_enc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_include_add_rsp_enc
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_hvx_rsp_enc
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_descriptor_add_rsp_enc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_characteristic_add_rsp_enc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_get_rsp_enc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_t_enc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_t_enc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_timeout_t_enc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_t_enc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_t_enc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_pa_lna_cfg_t_enc
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_setup_rsp_enc
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_ch_flow_control_rsp_enc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_get_rsp_enc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecb_block_encrypt_rsp_enc
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ble_gap_conn.o(i.ble_gap_adv_set_configure_rsp_enc)
<LI> ble_conn.o(i.ble_uuid_vs_add_rsp_enc)
<LI> ble_gap_conn.o(i.ble_gap_rssi_get_rsp_enc)
</UL>
<P><STRONG><a name="[242]"></a>uint8_vector_dec</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_serialization.o(i.uint8_vector_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uint8_vector_dec
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sign_info_t_dec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_id_t_dec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_p256_pk_t_dec
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_t_dec
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_dhkey_t_dec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_irk_t_dec
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_info_t_dec
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_t_dec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid128_t_dec
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_ch_map_t_dec
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ecb_hal_data_t_in_dec
</UL>

<P><STRONG><a name="[243]"></a>uint8_vector_enc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_serialization.o(i.uint8_vector_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uint8_vector_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_t_enc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_addr_t_enc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_qos_channel_survey_report_enc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_passkey_display_enc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_opt_ch_map_t_enc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid_encode_rsp_enc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sign_info_t_enc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_master_id_t_enc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_irk_t_enc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_info_t_enc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_p256_pk_t_enc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_t_enc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uuid128_t_enc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_t_enc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_read_rsp_t_enc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_t_enc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_vals_read_rsp_t_enc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_val_by_uuid_read_rsp_t_enc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ecb_hal_data_t_out_enc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cc]"></a>on_idle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.on_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = on_idle &rArr; app_usbd_event_queue_process &rArr; app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[dc]"></a>usbd_user_evt_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.usbd_user_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usbd_user_evt_handler &rArr; app_usbd_disable &rArr; nrfx_usbd_disable &rArr; nrfx_usbd_stop &rArr; usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_is_enabled
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_enable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2ec]"></a>bsp_board_leds_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[377]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[2ef]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[dd]"></a>dfu_trigger_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_dfu_trigger_usb.o(i.dfu_trigger_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_trigger_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_dfu_trigger_usb.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_dfu_trigger_usb.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_trigger_evt_handler
</UL>

<P><STRONG><a name="[35e]"></a>strings_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_dfu_trigger_usb.o(i.strings_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strings_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_trigger_usb_init
</UL>

<P><STRONG><a name="[177]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_dtm.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[3bb]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_dtm.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
</UL>

<P><STRONG><a name="[31e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_dtm.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_init
</UL>

<P><STRONG><a name="[2fb]"></a>check_pdu</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ble_dtm.o(i.check_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_pdu &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
</UL>

<P><STRONG><a name="[318]"></a>dtm_test_done</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_dtm.o(i.dtm_test_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dtm_test_done
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_reset
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_turn_off_test
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_setup_cmd
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
</UL>

<P><STRONG><a name="[16c]"></a>nrf_radio_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dtm.o(i.nrf_radio_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dtm.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_wait
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>nrf_timer_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_dtm.o(i.nrf_timer_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_wait
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>nrf_timer_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_dtm.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_end_event_process
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_wait
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>nrf_timer_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dtm.o(i.nrf_timer_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[317]"></a>on_test_setup_cmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ble_dtm.o(i.on_test_setup_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_test_setup_cmd &rArr; phy_set &rArr; radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_power_set
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_test_done
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
</UL>

<P><STRONG><a name="[31a]"></a>on_test_transmit_cmd</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, ble_dtm.o(i.on_test_transmit_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_test_transmit_cmd &rArr; radio_prepare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_prepare
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_constant_carrier
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_set_txpower
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
</UL>

<P><STRONG><a name="[3b3]"></a>phy_set</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ble_dtm.o(i.phy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = phy_set &rArr; radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_strict_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_setup_cmd
</UL>

<P><STRONG><a name="[16d]"></a>radio_end_event_process</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ble_dtm.o(i.radio_end_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = radio_end_event_process &rArr; check_pdu &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pdu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>

<P><STRONG><a name="[31d]"></a>radio_init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ble_dtm.o(i.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_reset
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_radio_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_init
</UL>

<P><STRONG><a name="[319]"></a>radio_prepare</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ble_dtm.o(i.radio_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = radio_prepare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_turn_off_test
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_strict_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_transmit_cmd
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_cmd
</UL>

<P><STRONG><a name="[329]"></a>radio_reset</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ble_dtm.o(i.radio_reset))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_test_done
</UL>

<P><STRONG><a name="[31c]"></a>timer_init</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ble_dtm.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_init
</UL>

<P><STRONG><a name="[3b4]"></a>transmit_power_set</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ble_dtm.o(i.transmit_power_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transmit_power_set
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_test_setup_cmd
</UL>

<P><STRONG><a name="[2fd]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[cd]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[361]"></a>item_enqueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[365]"></a>nrf_wdt_started</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_wdt_started))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[15c]"></a>sd_state_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; nrfx_clock_lfclk_stop &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[158]"></a>soc_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[36b]"></a>nrf_drv_power_sd_usbevt_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_sd_usbevt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_power_sd_usbevt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_uninit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_usbevt_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sdh_state_evt_handler
</UL>

<P><STRONG><a name="[159]"></a>nrf_drv_power_sdh_soc_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_drv_power.o(i.nrf_drv_power_sdh_soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_power_sdh_soc_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_pof_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_power.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[15d]"></a>nrf_drv_power_sdh_state_evt_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, nrf_drv_power.o(i.nrf_drv_power_sdh_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_power_sdh_state_evt_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_usb_handler_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_pof_handler_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_power_sd_usbevt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_power.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[cf]"></a>uart_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[ce]"></a>uarte_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[391]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[390]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_irq_handler
</UL>

<P><STRONG><a name="[392]"></a>nrf_power_event_get_and_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_power.o(i.nrf_power_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_power_event_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_irq_handler
</UL>

<P><STRONG><a name="[394]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[1ee]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[378]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[37c]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[1f0]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[379]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[399]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[397]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[3ee]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[39a]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3ef]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[398]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_enable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[39d]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3f0]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[396]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[1f2]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[347]"></a>interrupts_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[37a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[37d]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[1f5]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[1f4]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[37b]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[1f3]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3a1]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[348]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[3a0]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[3f1]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3f2]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[39f]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[3af]"></a>_NRFX_IRQ_IS_ENABLED</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_usbd.o(i._NRFX_IRQ_IS_ENABLED))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>

<P><STRONG><a name="[332]"></a>bit2ep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_usbd.o(i.bit2ep))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
</UL>

<P><STRONG><a name="[32e]"></a>ep2bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ep2bit))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_sof_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[32d]"></a>ep_state_access</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ep_state_access))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_set
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_max_packet_size_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[e2]"></a>ev_dma_epin0_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ev_dma_epin0_handler &rArr; nrf_usbd_ep0in_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>ev_dma_epin1_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin1_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ev_dma_epin2_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin2_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ev_dma_epin3_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin3_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ev_dma_epin4_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin4_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ev_dma_epin5_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin5_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ev_dma_epin6_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin6_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ev_dma_epin7_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epin7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin7_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ev_dma_epin8_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_dma_epin8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epin8_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>ev_dma_epout0_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_dma_epout0_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epout0_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ev_dma_epout1_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout1_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ev_dma_epout2_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout2_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>ev_dma_epout3_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout3_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout3_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>ev_dma_epout4_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout4_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>ev_dma_epout5_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout5_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout5_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ev_dma_epout6_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout6_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout6_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>ev_dma_epout7_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_dma_epout7_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_dma_epout7_handler &rArr; nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>ev_dma_epout8_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_dma_epout8_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_dma_epout8_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ev_epdata_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_epdata_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ev_epdata_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ev_setup_data_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_setup_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ev_setup_data_handler &rArr; usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ev_setup_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ev_setup_handler &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ev_sof_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrfx_usbd.o(i.ev_sof_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ev_sof_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ev_started_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_usbd.o(i.ev_started_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>ev_usbevent_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrfx_usbd.o(i.ev_usbevent_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ev_usbevent_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>ev_usbreset_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_usbd.o(i.ev_usbreset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ev_usbreset_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>nrf_usbd_ep0in_dma_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_ep0in_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_usbd_ep0in_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin0_handler
</UL>

<P><STRONG><a name="[3aa]"></a>nrf_usbd_ep_enable_check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_ep_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable_check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
</UL>

<P><STRONG><a name="[32b]"></a>nrf_usbd_epin_dma_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epin_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin7_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin6_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin5_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin4_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin3_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin2_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin1_handler
</UL>

<P><STRONG><a name="[331]"></a>nrf_usbd_epout_dma_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrfx_usbd.o(i.nrf_usbd_epout_dma_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_usbd_epout_dma_handler &rArr; usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout7_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout6_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout5_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout4_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout3_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout2_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout1_handler
</UL>

<P><STRONG><a name="[38e]"></a>nrf_usbd_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
</UL>

<P><STRONG><a name="[179]"></a>nrf_usbd_event_get_and_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_usbd.o(i.nrf_usbd_event_get_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_usbd_event_get_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[335]"></a>nrf_usbd_eventcause_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_eventcause_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[3b1]"></a>nrf_usbd_lowpower_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_lowpower_check))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
</UL>

<P><STRONG><a name="[330]"></a>nrf_usbd_task_trigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrf_usbd_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_usbevent_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
</UL>

<P><STRONG><a name="[3f6]"></a>nrfx_usbd_ep_to_endevent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_endevent))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_data_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
</UL>

<P><STRONG><a name="[3a9]"></a>nrfx_usbd_ep_to_int</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_ep_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
</UL>

<P><STRONG><a name="[3b2]"></a>nrfx_usbd_errata_171</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_171))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_wakeup_req
</UL>

<P><STRONG><a name="[3a5]"></a>nrfx_usbd_errata_187</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_187))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[3f4]"></a>nrfx_usbd_errata_199</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_usbd.o(i.nrfx_usbd_errata_199))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dmareq_process
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dma_pending_clear
</UL>

<P><STRONG><a name="[32c]"></a>usbd_dma_pending_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_dma_pending_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_dma_pending_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_199
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout8_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epout0_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_dma_epin8_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_disable
</UL>

<P><STRONG><a name="[17a]"></a>usbd_dmareq_process</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, nrfx_usbd.o(i.usbd_dmareq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_dmareq_process &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_atomic_u32_fetch_and
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_199
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_task_trigger
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_check
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_epout_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epout_dma_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[3a4]"></a>usbd_enable</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_enable &rArr; usbd_errata_187_211_end &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_end
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_errata_187_211_begin
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_187
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_errata_171
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_eventcause_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[334]"></a>usbd_ep_abort</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, nrfx_usbd.o(i.usbd_ep_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_state_access
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep2bit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_transfer_out_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort_all
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_disable
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_abort
</UL>

<P><STRONG><a name="[3b0]"></a>usbd_ep_abort_all</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_abort_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_ep_abort_all &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_abort
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2ep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_stop
</UL>

<P><STRONG><a name="[333]"></a>usbd_ep_data_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrfx_usbd.o(i.usbd_ep_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ep_data_handler &rArr; nrf_usbd_epin_dma_handler &rArr; nrfx_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_to_endevent
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_event_get_and_clear
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_epin_dma_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_usbd_ep0in_dma_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_setup_data_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ev_epdata_handler
</UL>

<P><STRONG><a name="[3a6]"></a>usbd_errata_187_211_begin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_usbd.o(i.usbd_errata_187_211_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_errata_187_211_begin &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[3a7]"></a>usbd_errata_187_211_end</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrfx_usbd.o(i.usbd_errata_187_211_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_errata_187_211_end &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_enable
</UL>

<P><STRONG><a name="[3ac]"></a>usbd_int_rise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_usbd.o(i.usbd_int_rise))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_transfer
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_handled_transfer
</UL>

<P><STRONG><a name="[f9]"></a>compare_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer2.o(i.compare_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>get_now</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_timer2.o(i.get_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_now
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3a]"></a>rtc_irq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_timer2.o(i.rtc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_irq &rArr; rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(i.app_timer_init)
</UL>
<P><STRONG><a name="[3bf]"></a>rtc_schedule</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_timer2.o(i.rtc_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3be]"></a>rtc_update</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer2.o(i.rtc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3c3]"></a>sortlist_pop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer2.o(i.sortlist_pop))
<BR><BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3bc]"></a>timer_expire</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_timer2.o(i.timer_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_expire &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3bd]"></a>timer_req_process</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_timer2.o(i.timer_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_req_process &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[192]"></a>timer_req_schedule</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_timer2.o(i.timer_req_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[1a2]"></a>app_usbd_class_iface_ep_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_iface_ep_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
</UL>

<P><STRONG><a name="[1a3]"></a>app_usbd_class_iface_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_class_iface_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_find
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_deselect
</UL>

<P><STRONG><a name="[1ce]"></a>app_usbd_core_handler_call</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_core_handler_call))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1bf]"></a>app_usbd_ep_conf_access</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_ep_conf_access))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_instance_get
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_call
</UL>

<P><STRONG><a name="[1a1]"></a>app_usbd_ep_instance_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_instance_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_usbd_ep_instance_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
</UL>

<P><STRONG><a name="[1a4]"></a>app_usbd_ep_instance_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_usbd.o(i.app_usbd_ep_instance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_usbd_ep_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_conf_access
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_append
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
</UL>

<P><STRONG><a name="[1c7]"></a>app_usbd_event_add</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, app_usbd.o(i.app_usbd_event_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_stop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_power_event_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_hfclk_ready
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_handler
</UL>

<P><STRONG><a name="[3b]"></a>app_usbd_event_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_usbd_event_handler &rArr; app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(i.app_usbd_init)
</UL>
<P><STRONG><a name="[0]"></a>app_usbd_hfclk_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_hfclk_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_usbd_hfclk_ready &rArr; app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>app_usbd_power_event_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_power_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_usbd_power_event_handler &rArr; app_usbd_event_add &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>app_usbd_sustate_with_requested_hfclk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_sustate_with_requested_hfclk))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[3e7]"></a>app_usbd_sustate_with_running_hfclk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_usbd.o(i.app_usbd_sustate_with_running_hfclk))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sustate_set
</UL>

<P><STRONG><a name="[194]"></a>class_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_usbd.o(i.class_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_until_served_call
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_call
</UL>

<P><STRONG><a name="[1d2]"></a>sustate_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app_usbd.o(i.sustate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sustate_set &rArr; nrf_drv_clock_hfclk_request &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_running_hfclk
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_sustate_with_requested_hfclk
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_suspend_irq_config
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_active_irq_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[1cb]"></a>user_event_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd.o(i.user_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_add
</UL>

<P><STRONG><a name="[1cf]"></a>user_event_state_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd.o(i.user_event_state_proc))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>

<P><STRONG><a name="[2f8]"></a>app_usbd_class_iface_ep_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.app_usbd_class_iface_ep_get))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
</UL>

<P><STRONG><a name="[2f7]"></a>app_usbd_class_iface_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.app_usbd_class_iface_get))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_feed_descriptors
</UL>

<P><STRONG><a name="[fe]"></a>cdc_acm_consumer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_consumer))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>cdc_acm_event_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, app_usbd_cdc_acm.o(i.cdc_acm_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = cdc_acm_event_handler &rArr; setup_event_handler &rArr; setup_req_class_out &rArr; nrfx_usbd_ep_abort &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_ep_in_addr_get
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_reset_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>cdc_acm_feed_descriptors</STRONG> (Thumb, 1630 bytes, Stack size 40 bytes, app_usbd_cdc_acm.o(i.cdc_acm_feed_descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cdc_acm_feed_descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>cdc_acm_req_out_data_cb</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_req_out_data_cb))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>cdc_acm_reset_port</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_reset_port))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[2f5]"></a>cdc_acm_rx_block_finished</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, app_usbd_cdc_acm.o(i.cdc_acm_rx_block_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cdc_acm_rx_block_finished &rArr; app_usbd_ep_handled_transfer &rArr; nrfx_usbd_ep_handled_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[ff]"></a>cdc_acm_single_shoot_consumer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.cdc_acm_single_shoot_consumer))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_cdc_acm.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>comm_ep_in_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.comm_ep_in_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comm_ep_in_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[19e]"></a>data_ep_in_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.data_ep_in_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_ep_in_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
</UL>

<P><STRONG><a name="[19b]"></a>data_ep_out_addr_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_usbd_cdc_acm.o(i.data_ep_out_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_ep_out_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_get
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_iface_ep_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
</UL>

<P><STRONG><a name="[2f3]"></a>setup_event_handler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, app_usbd_cdc_acm.o(i.setup_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = setup_event_handler &rArr; setup_req_class_out &rArr; nrfx_usbd_ep_abort &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_descriptor_find
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[3e3]"></a>setup_req_class_out</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, app_usbd_cdc_acm.o(i.setup_req_class_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setup_req_class_out &rArr; nrfx_usbd_ep_abort &rArr; usbd_ep_abort &rArr; nrfx_usbd_transfer_out_drop &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_abort
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_event_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_out_addr_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ep_in_addr_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>

<P><STRONG><a name="[2f6]"></a>user_event_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_usbd_cdc_acm.o(i.user_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_class_out
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_rx_block_finished
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_event_handler
</UL>

<P><STRONG><a name="[102]"></a>app_usbd_core_event_handler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, app_usbd_core.o(i.app_usbd_core_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = app_usbd_core_event_handler &rArr; app_usbd_core_setup_req_handler &rArr; setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_ep0_handler_check
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>app_usbd_core_setup_req_handler</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, app_usbd_core.o(i.app_usbd_core_setup_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = app_usbd_core_setup_req_handler &rArr; setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_stall
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_get
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_data_clear
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_setup_clear
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_last_setup_dir_get
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_ep0_handler_check
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_interface_req_std_handle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_endpoint_req_std
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_find
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_call
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_call
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_until_served_call
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[100]"></a>setup_data_handler_empty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_usbd_core.o(i.setup_data_handler_empty))
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[3df]"></a>setup_device_req_get_descriptor</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, app_usbd_core.o(i.setup_device_req_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_string_desc_get
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_data_handler_set
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_ep_handled_transfer
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_rwu_enabled_check
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_first_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
</UL>

<P><STRONG><a name="[1b3]"></a>setup_device_req_std_handler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, app_usbd_core.o(i.setup_device_req_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = setup_device_req_std_handler &rArr; setup_device_req_get_descriptor &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_core_state_set
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_get_descriptor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_rwu_enabled_check
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_select_0
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_all_iface_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[1b8]"></a>setup_endpoint_req_std</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_usbd_core.o(i.setup_endpoint_req_std))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setup_endpoint_req_std &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_clear
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall_check
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_stall
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_ep_dtoggle_clear
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[1b6]"></a>setup_interface_req_std_handle</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_usbd_core.o(i.setup_interface_req_std_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setup_interface_req_std_handle &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_selection_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_iface_select
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
</UL>

<P><STRONG><a name="[1ad]"></a>usb_core_ep0_handler_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_usbd_core.o(i.usb_core_ep0_handler_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_req_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[1aa]"></a>usbd_core_state_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_usbd_core.o(i.usbd_core_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usbd_core_state_set &rArr; app_usbd_event_execute &rArr;  app_usbd_event_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_event_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_device_req_std_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_event_handler
</UL>

<P><STRONG><a name="[101]"></a>usbd_descriptor_conf_feeder</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, app_usbd_core.o(i.usbd_descriptor_conf_feeder))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_descriptor_conf_feeder
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_usbd_feeder_buffer_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_core.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>nrf_dfu_trigger_event_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_usbd_nrf_dfu_trigger.o(i.nrf_dfu_trigger_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nrf_dfu_trigger_event_handler &rArr; setup_event_handler &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_nrf_dfu_trigger.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>nrf_dfu_trigger_feed_descriptors</STRONG> (Thumb, 560 bytes, Stack size 36 bytes, app_usbd_nrf_dfu_trigger.o(i.nrf_dfu_trigger_feed_descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_dfu_trigger_feed_descriptors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbd_nrf_dfu_trigger.o(.constdata)
</UL>
<P><STRONG><a name="[35d]"></a>setup_event_handler</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, app_usbd_nrf_dfu_trigger.o(i.setup_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = setup_event_handler &rArr; app_usbd_core_setup_rsp &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_rsp
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_class_descriptor_find
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_trigger_event_handler
</UL>

<P><STRONG><a name="[1e6]"></a>app_usbd_prepare_string</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_usbd_string_desc.o(i.app_usbd_prepare_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_usbd_prepare_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_core_setup_transfer_buff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_string_desc_get
</UL>

<P><STRONG><a name="[312]"></a>evt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_rtc.o(i.evt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
</UL>

<P><STRONG><a name="[310]"></a>evt_pending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_rtc.o(i.evt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
</UL>

<P><STRONG><a name="[311]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>

<P><STRONG><a name="[315]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_rtc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[37f]"></a>nrf_queue_next_idx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[381]"></a>queue_utilization_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[38d]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[1f9]"></a>field_dec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn.o(i.field_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_set_req_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cfg_set_req_dec
</UL>

<P><STRONG><a name="[2dc]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_get_rsp_enc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_opt_get_rsp_enc
</UL>

<P><STRONG><a name="[268]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap_evt_conn.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_timeout_enc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_request_enc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_params_request_enc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_info_request_enc
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_scan_req_report_enc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_phy_update_request_enc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_disconnected_enc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_request_enc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_data_length_update_enc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_connected_enc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_sec_update_enc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_request_enc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_enc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_enc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_set_terminated_enc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_enc
</UL>

<P><STRONG><a name="[244]"></a>field_dec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.field_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_t_dec
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_keyset_t_dec
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_t_dec
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_id_key_t_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_params_t_dec
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_data_t_dec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_cfg_device_name_t_dec
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_key_t_dec
</UL>

<P><STRONG><a name="[245]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gap_struct_serialization.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_keyset_t_enc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_lesc_oob_data_t_enc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_conn_sec_t_enc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_sec_params_t_enc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_id_key_t_enc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_enc_key_t_enc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_adv_data_t_enc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_params_request_t_enc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_sec_info_request_t_enc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_connected_t_enc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_sec_update_t_enc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_t_enc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_conn_param_update_request_t_enc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_auth_status_t_enc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_set_terminated_t_enc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_evt_adv_report_t_enc
</UL>

<P><STRONG><a name="[29f]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc_evt_conn.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_write_rsp_enc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_timeout_enc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_rel_disc_rsp_enc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_read_rsp_enc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_prim_srvc_disc_rsp_enc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_hvx_enc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_exchange_mtu_rsp_enc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_desc_disc_rsp_enc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_vals_read_rsp_enc
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_val_by_uuid_read_rsp_enc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_disc_rsp_enc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_enc
</UL>

<P><STRONG><a name="[293]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gattc_struct_serialization.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_service_t_enc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_include_t_enc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_desc_t_enc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_char_t_enc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info16_t_enc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_attr_info128_t_enc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_rel_disc_rsp_t_enc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_prim_srvc_disc_rsp_t_enc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_desc_disc_rsp_t_enc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_char_disc_rsp_t_enc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gattc_evt_attr_info_disc_rsp_t_enc
</UL>

<P><STRONG><a name="[2b4]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gatts_evt_conn.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_enc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_timeout_enc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_sys_attr_missing_enc
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_enc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_hvc_enc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_exchange_mtu_request_enc
</UL>

<P><STRONG><a name="[2ae]"></a>field_dec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gatts_struct_serialization.o(i.field_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_rw_authorize_reply_params_t_dec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_char_md_t_dec
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_md_t_dec
</UL>

<P><STRONG><a name="[2af]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_gatts_struct_serialization.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_write_t_enc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_rw_authorize_request_t_enc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_attr_md_t_enc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatts_evt_read_t_enc
</UL>

<P><STRONG><a name="[2d9]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_l2cap_evt_conn.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_request_enc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_l2cap_evt_ch_setup_enc
</UL>

<P><STRONG><a name="[3b7]"></a>uint32_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_serialization.o(i.uint32_encode))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_t_enc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_ble_cmd_rsp_status_code_enc
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_status_enc
</UL>

<P><STRONG><a name="[1fc]"></a>field_dec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_struct_serialization.o(i.field_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_pa_lna_t_dec
</UL>

<P><STRONG><a name="[1fd]"></a>field_enc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_struct_serialization.o(i.field_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = field_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_common_opt_pa_lna_t_enc
</UL>

<P><STRONG><a name="[327]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dtm_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[322]"></a>uart_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, dtm_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_enable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtm_start
</UL>

<P><STRONG><a name="[d6]"></a>sd_start_from_app_sched</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ser_conn_reset_cmd_decoder.o(i.sd_start_from_app_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sd_start_from_app_sched &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_conn_reset_cmd_decoder.o(i.sdh_observer_handler)
</UL>
<P><STRONG><a name="[15e]"></a>sdh_observer_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ser_conn_reset_cmd_decoder.o(i.sdh_observer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sdh_observer_handler &rArr; app_sched_event_put &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_resume
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_conn_reset_cmd_decoder.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[d8]"></a>phy_events_handler</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, ser_hal_transport.o(i.phy_events_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = phy_events_handler &rArr; ser_hal_transport_rx_pkt_free &rArr; ser_phy_interrupts_enable &rArr; hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_resume
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_rx_buf_set
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_rx_pkt_free
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_hal_transport_tx_pkt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_hal_transport.o(i.ser_hal_transport_open)
</UL>
<P><STRONG><a name="[17f]"></a>ack_transmit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ser_phy_hci.o(i.ack_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ack_transmit &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_tx_pkt_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_checksum_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
</UL>

<P><STRONG><a name="[3c6]"></a>expected_ack_number_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ser_phy_hci.o(i.expected_ack_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_ack_pkt_valid
</UL>

<P><STRONG><a name="[336]"></a>hci_pkt_send</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ser_phy_hci.o(i.hci_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_compute
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_tx_pkt_send
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_checksum_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>

<P><STRONG><a name="[338]"></a>hci_pkt_sent_upcall</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ser_phy_hci.o(i.hci_pkt_sent_upcall))
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_event_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>

<P><STRONG><a name="[33a]"></a>hci_release_ack_buffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ser_phy_hci.o(i.hci_release_ack_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hci_release_ack_buffer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_rx_buf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>

<P><STRONG><a name="[33c]"></a>hci_rx_event_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ser_phy_hci.o(i.hci_rx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = hci_rx_event_handler &rArr; hci_rx_fsm &rArr; hci_rx_fsm_event_process &rArr; ack_transmit &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_rx_buf_set
</UL>

<P><STRONG><a name="[33e]"></a>hci_rx_fsm</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ser_phy_hci.o(i.hci_rx_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = hci_rx_fsm &rArr; hci_rx_fsm_event_process &rArr; ack_transmit &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
</UL>

<P><STRONG><a name="[340]"></a>hci_rx_fsm_event_process</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ser_phy_hci.o(i.hci_rx_fsm_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = hci_rx_fsm_event_process &rArr; ack_transmit &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_rx_buf_free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_event_callback
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_transmit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm
</UL>

<P><STRONG><a name="[178]"></a>hci_signal_timeout_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ser_phy_hci.o(i.hci_signal_timeout_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = hci_signal_timeout_event &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
</UL>

<P><STRONG><a name="[d9]"></a>hci_slip_event_handler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ser_phy_hci.o(i.hci_slip_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = hci_slip_event_handler &rArr; hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_compute
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_rx_buf_free
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_event_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_phy_hci.o(i.ser_phy_open)
</UL>
<P><STRONG><a name="[345]"></a>hci_timeout_setup</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ser_phy_hci.o(i.hci_timeout_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hci_timeout_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>

<P><STRONG><a name="[3dc]"></a>hci_timer_reset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ser_phy_hci.o(i.hci_timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_open
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_reset
</UL>

<P><STRONG><a name="[341]"></a>hci_tx_event_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ser_phy_hci.o(i.hci_tx_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = hci_tx_event_handler &rArr; hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_slip_event_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_signal_timeout_event
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_tx_pkt_send
</UL>

<P><STRONG><a name="[343]"></a>hci_tx_fsm</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ser_phy_hci.o(i.hci_tx_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = hci_tx_fsm &rArr; hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_event_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_interrupts_enable
</UL>

<P><STRONG><a name="[344]"></a>hci_tx_fsm_event_process</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ser_phy_hci.o(i.hci_tx_fsm_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = hci_tx_fsm_event_process &rArr; hci_pkt_send &rArr; ser_phy_hci_slip_tx_pkt_send &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_event_callback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_ack_pkt_valid
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_timeout_setup
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_ack_buffer
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_sent_upcall
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm
</UL>

<P><STRONG><a name="[180]"></a>header_checksum_calculate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ser_phy_hci.o(i.header_checksum_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ack_transmit
</UL>

<P><STRONG><a name="[346]"></a>rx_ack_pkt_valid</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ser_phy_hci.o(i.rx_ack_pkt_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_ack_pkt_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expected_ack_number_get
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
</UL>

<P><STRONG><a name="[339]"></a>ser_phy_event_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ser_phy_hci.o(i.ser_phy_event_callback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_fsm_event_process
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_fsm_event_process
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pkt_sent_upcall
</UL>

<P><STRONG><a name="[156]"></a>cdc_acm_user_ev_handler</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ser_phy_hci_slip_cdc.o(i.cdc_acm_user_ev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cdc_acm_user_ev_handler &rArr; tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_read
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_fill
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phi_hci_rx_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ser_phy_hci_slip_cdc.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>ser_phi_hci_rx_byte</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ser_phy_hci_slip_cdc.o(i.ser_phi_hci_rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ser_phi_hci_rx_byte &rArr; slip_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slip_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
</UL>

<P><STRONG><a name="[3d9]"></a>slip_decode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ser_phy_hci_slip_cdc.o(i.slip_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = slip_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phi_hci_rx_byte
</UL>

<P><STRONG><a name="[2fa]"></a>tx_buf_fill</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ser_phy_hci_slip_cdc.o(i.tx_buf_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tx_buf_fill &rArr; tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_put
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_user_ev_handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_phy_hci_slip_tx_pkt_send
</UL>

<P><STRONG><a name="[3ed]"></a>tx_buf_put</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ser_phy_hci_slip_cdc.o(i.tx_buf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tx_buf_put &rArr; app_usbd_cdc_acm_write &rArr; app_usbd_ep_transfer &rArr; nrfx_usbd_ep_transfer &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usbd_cdc_acm_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_fill
</UL>

<P><STRONG><a name="[38b]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[387]"></a>sdh_request_observer_notify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[388]"></a>sdh_state_observer_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[389]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_suspend
</UL>

<P><STRONG><a name="[38a]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[15a]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 88 bytes, Stack size 536 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[15b]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[17c]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[17e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
